{
  "active": true,
  "connections": {
    "Get All Ad Accounts": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        []
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get Ad Accounts",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get All Ad Accounts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Supabase": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Loop Each Account",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Ad Accounts": {
      "main": [
        [
          {
            "node": "Extract Accounts",
            "type": "main",
            "index": 0
          },
          {
            "node": "Ad Accounts - Page 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ad Accounts - Page 2": {
      "main": [
        [
          {
            "node": "Extract Accounts 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Accounts": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Extract Accounts 2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Each Account": {
      "main": [
        [],
        [
          {
            "node": "Get All Ad Accounts1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get All Ad Accounts1": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Loop Each Account",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Account Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Account Details": {
      "main": [
        [
          {
            "node": "Add New Account to SupaBase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add New Account to SupaBase": {
      "main": [
        [
          {
            "node": "Loop Each Account",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-02-07T08:51:13.866Z",
  "id": "2Fi79xQdqLoiEGaz",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Add New Facebook Ad Campaign Metrics to SalesGenius Reports App",
  "nodes": [
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "ad_accounts",
        "returnAll": true,
        "filters": {
          "conditions": [
            {
              "keyName": "is_visible",
              "condition": "eq",
              "keyValue": "true"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1720,
        -260
      ],
      "id": "dd7b6c6d-658c-4311-8ab3-e5fd5d94d6e0",
      "name": "Get All Ad Accounts",
      "credentials": {
        "supabaseApi": {
          "id": "HhO7yCFHyxbzmZWK",
          "name": "Supabase Ads Database"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1460,
        -260
      ],
      "id": "cb419e26-694a-4ee3-8f95-757682527833",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://idpyaofyryuctbwfymky.supabase.co/rest/v1/rpc/fetch_facebook_insights",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImlkcHlhb2Z5cnl1Y3Rid2Z5bWt5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzI4MTE0MjgsImV4cCI6MjA0ODM4NzQyOH0.Jj948LJzWwGynHUGhLSUQvZ4cYLngUIrbs09-bM_h7Q"
            },
            {
              "name": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImlkcHlhb2Z5cnl1Y3Rid2Z5bWt5Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczMjgxMTQyOCwiZXhwIjoyMDQ4Mzg3NDI4fQ.kYcnVtuYc2piC1aPJy6HD_WdcGj6WUiUcifrgEhovBg"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "p_ad_account_id",
              "value": "={{ $('Loop Over Items').item.json.id.slice(4) }}"
            },
            {
              "name": "p_date_start",
              "value": "={{ new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString().split('T')[0] }}\n"
            },
            {
              "name": "=p_date_stop",
              "value": "={{ new Date().toISOString().split('T')[0] }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1160,
        -260
      ],
      "id": "0b78a86b-4e3a-4015-8a62-69f78cfff852",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 9,
              "triggerAtMinute": 5
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -2080,
        -520
      ],
      "id": "19953a7b-ce53-4472-9e3b-d7cdca0e5234",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "You are a helpful assistant that uses the supabase tool to find campaign data for our clients, use the date start and stop to filter for specific dates"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -700,
        560
      ],
      "id": "bb900025-e09a-4df9-be2b-cc5ee1d493bb",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -1100,
        560
      ],
      "id": "96c4be3a-df0c-4fd5-8f73-9fa155c77335",
      "name": "When chat message received",
      "webhookId": "b839e5c4-6e59-4285-897d-013ec5f9fb37"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -780,
        800
      ],
      "id": "922459ef-f89e-4b13-b28c-7a37b05cb57f",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "nZMNWnEAM8PAaDOP",
          "name": "SupaBase Postgres - IPv4"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "detailed_metrics",
        "filters": {
          "conditions": [
            {
              "keyName": "leads",
              "condition": "gt",
              "keyValue": "0"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        -540,
        780
      ],
      "id": "04857815-2acc-48d2-acf7-3e488d68ca83",
      "name": "Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "HhO7yCFHyxbzmZWK",
          "name": "Supabase Ads Database"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "o1",
          "mode": "list",
          "cachedResultName": "o1"
        },
        "options": {
          "responseFormat": "text"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -920,
        740
      ],
      "id": "6a9ff9e8-c38c-49bf-b069-1e277f45e3bd",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "OuCQDhJFLNpO2FbW",
          "name": "Arslans Open Ai Key"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -980,
        -720
      ],
      "id": "b4e5902e-0c2e-4d60-8ba9-b5fd02da3d45",
      "name": "Merge"
    },
    {
      "parameters": {
        "graphApiVersion": "v22.0",
        "node": "704945737773926/client_ad_accounts",
        "options": {}
      },
      "type": "n8n-nodes-base.facebookGraphApi",
      "typeVersion": 1,
      "position": [
        -1720,
        -740
      ],
      "id": "87c8ab86-5a45-4b01-ba26-3daf25c2b24f",
      "name": "Get Ad Accounts",
      "credentials": {
        "facebookGraphApi": {
          "id": "AVglZdQLFCBxqHem",
          "name": "Facebook Graph account"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.paging.next }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1440,
        -740
      ],
      "id": "a521b5ec-3e63-4b2a-9868-f48ac94affc1",
      "name": "Ad Accounts - Page 2"
    },
    {
      "parameters": {
        "jsCode": "// Get the raw input\nconst rawInput = $json;\nlet debug = { \n  inputType: typeof rawInput,\n  isArray: Array.isArray(rawInput),\n  inputLength: Array.isArray(rawInput) ? rawInput.length : 'Not an array'\n};\n\n// Initialize output array\nlet allAccounts = [];\n\ntry {\n  // Try to access as a property if it's an object\n  if (typeof rawInput === 'object' && !Array.isArray(rawInput) && rawInput !== null) {\n    // If input is the first item directly\n    if (rawInput.data && Array.isArray(rawInput.data)) {\n      for (let i = 0; i < rawInput.data.length; i++) {\n        allAccounts.push({\n          account_id: rawInput.data[i].account_id,\n          id: rawInput.data[i].id\n        });\n      }\n    } \n  }\n  // Try to access as an array\n  else if (Array.isArray(rawInput)) {\n    for (let i = 0; i < rawInput.length; i++) {\n      const item = rawInput[i];\n      if (item && item.data && Array.isArray(item.data)) {\n        for (let j = 0; j < item.data.length; j++) {\n          allAccounts.push({\n            account_id: item.data[j].account_id,\n            id: item.data[j].id\n          });\n        }\n      }\n    }\n  }\n} catch (error) {\n  // Return error information if something goes wrong\n  return {\n    error: error.message,\n    debug: debug,\n    rawInput: JSON.stringify(rawInput).substring(0, 200) + '...' // First 200 chars\n  };\n}\n\n// If we found accounts, return them\nif (allAccounts.length > 0) {\n  return allAccounts;\n}\n\n// If we didn't find any accounts, return debug info\nreturn {\n  message: \"No accounts found\",\n  debug: debug,\n  rawInputSample: JSON.stringify(rawInput).substring(0, 200) + '...' // First 200 chars\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1340,
        -560
      ],
      "id": "1093f1f2-6bb9-423d-828a-6a90db3074a7",
      "name": "Extract Accounts"
    },
    {
      "parameters": {
        "jsCode": "// Get the raw input\nconst rawInput = $json;\nlet debug = { \n  inputType: typeof rawInput,\n  isArray: Array.isArray(rawInput),\n  inputLength: Array.isArray(rawInput) ? rawInput.length : 'Not an array'\n};\n\n// Initialize output array\nlet allAccounts = [];\n\ntry {\n  // Try to access as a property if it's an object\n  if (typeof rawInput === 'object' && !Array.isArray(rawInput) && rawInput !== null) {\n    // If input is the first item directly\n    if (rawInput.data && Array.isArray(rawInput.data)) {\n      for (let i = 0; i < rawInput.data.length; i++) {\n        allAccounts.push({\n          account_id: rawInput.data[i].account_id,\n          id: rawInput.data[i].id\n        });\n      }\n    } \n  }\n  // Try to access as an array\n  else if (Array.isArray(rawInput)) {\n    for (let i = 0; i < rawInput.length; i++) {\n      const item = rawInput[i];\n      if (item && item.data && Array.isArray(item.data)) {\n        for (let j = 0; j < item.data.length; j++) {\n          allAccounts.push({\n            account_id: item.data[j].account_id,\n            id: item.data[j].id\n          });\n        }\n      }\n    }\n  }\n} catch (error) {\n  // Return error information if something goes wrong\n  return {\n    error: error.message,\n    debug: debug,\n    rawInput: JSON.stringify(rawInput).substring(0, 200) + '...' // First 200 chars\n  };\n}\n\n// If we found accounts, return them\nif (allAccounts.length > 0) {\n  return allAccounts;\n}\n\n// If we didn't find any accounts, return debug info\nreturn {\n  message: \"No accounts found\",\n  debug: debug,\n  rawInputSample: JSON.stringify(rawInput).substring(0, 200) + '...' // First 200 chars\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1240,
        -740
      ],
      "id": "21e2793e-33c1-445f-a82c-410f437b28f2",
      "name": "Extract Accounts 2"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -760,
        -720
      ],
      "id": "22ba6f84-b34b-433c-9258-21d8a24b5994",
      "name": "Loop Each Account"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "ad_accounts",
        "returnAll": true
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -540,
        -700
      ],
      "id": "684482f7-4cc9-45fc-9966-e7687e8fa2e3",
      "name": "Get All Ad Accounts1",
      "credentials": {
        "supabaseApi": {
          "id": "HhO7yCFHyxbzmZWK",
          "name": "Supabase Ads Database"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the id from the \"Loop Each Account\" node\nconst loopAccountId = $('Loop Each Account').first().json.id\n\n// Get all items from the \"Get All Ad Accounts1\" node\nconst supabaseItems = $items(\"Get All Ad Accounts1\");\n\n// Check if any of the Supabase items has an id matching loopAccountId\nconst matchFound = supabaseItems.some(item => item.json.id === loopAccountId);\n\n// Return the result (\"yes\" if a match was found, \"no\" otherwise)\nreturn [\n  {\n    json: {\n      matchFound,   // will be true if a match is found, false otherwise\n      loopAccountId // included for reference\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -380,
        -700
      ],
      "id": "10d10d08-0a92-4132-ae3d-dd9dacc223e7",
      "name": "Code"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f4b20d20-2634-4538-a7a2-ed788194fc18",
              "leftValue": "={{ $json.matchFound }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -220,
        -700
      ],
      "id": "c4338436-ac17-49b0-ac0f-2c99bea186a6",
      "name": "If"
    },
    {
      "parameters": {
        "graphApiVersion": "v22.0",
        "node": "={{ $json.loopAccountId }}?fields=name,account_status,currency,timezone_name,account_id",
        "options": {
          "queryParametersJson": "="
        }
      },
      "type": "n8n-nodes-base.facebookGraphApi",
      "typeVersion": 1,
      "position": [
        20,
        -680
      ],
      "id": "83b702e2-9286-4168-8330-9b100825b61a",
      "name": "Get Account Details",
      "credentials": {
        "facebookGraphApi": {
          "id": "AVglZdQLFCBxqHem",
          "name": "Facebook Graph account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "ad_accounts",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "id",
              "fieldValue": "={{ $json.id }}"
            },
            {
              "fieldId": "name",
              "fieldValue": "={{ $json.name }}"
            },
            {
              "fieldId": "account_status",
              "fieldValue": "={{ $json.account_status }}"
            },
            {
              "fieldId": "currency",
              "fieldValue": "={{ $json.currency }}"
            },
            {
              "fieldId": "timezone_name",
              "fieldValue": "={{ $json.timezone_name }}"
            },
            {
              "fieldId": "is_visible",
              "fieldValue": "true"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        240,
        -680
      ],
      "id": "8d5eda2f-a44c-422a-988e-f3b681834c59",
      "name": "Add New Account to SupaBase",
      "credentials": {
        "supabaseApi": {
          "id": "HhO7yCFHyxbzmZWK",
          "name": "Supabase Ads Database"
        }
      }
    },
    {
      "parameters": {
        "content": "# Add All Ad Accounts to SupaBase",
        "height": 420,
        "width": 2220,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1760,
        -840
      ],
      "id": "6499c0d9-1ca0-47b6-9083-8dc6ed2606c9",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "# Sync Campaign Metrics for All SupaBase Ad Accounts",
        "height": 380,
        "width": 1100,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1760,
        -380
      ],
      "id": "aed9570d-9d47-44e6-b247-de6b8070f489",
      "name": "Sticky Note1"
    }
  ],
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-02-07T08:51:13.874Z",
      "updatedAt": "2025-02-07T08:51:13.874Z",
      "role": "workflow:owner",
      "workflowId": "2Fi79xQdqLoiEGaz",
      "projectId": "JPifOz0qwqZ4t1q3",
      "project": {
        "createdAt": "2025-01-22T02:43:20.320Z",
        "updatedAt": "2025-01-22T02:44:04.001Z",
        "id": "JPifOz0qwqZ4t1q3",
        "name": "Emma Pace <emma@salesgenius.co>",
        "type": "personal",
        "icon": null,
        "projectRelations": [
          {
            "createdAt": "2025-01-22T02:43:20.320Z",
            "updatedAt": "2025-01-22T02:43:20.320Z",
            "role": "project:personalOwner",
            "userId": "f8bb0fb6-1857-45fa-9ac1-27b6e6497323",
            "projectId": "JPifOz0qwqZ4t1q3",
            "user": {
              "createdAt": "2025-01-22T02:43:19.556Z",
              "updatedAt": "2025-02-14T18:38:15.546Z",
              "id": "f8bb0fb6-1857-45fa-9ac1-27b6e6497323",
              "email": "emma@salesgenius.co",
              "firstName": "Emma",
              "lastName": "Pace",
              "personalizationAnswers": {
                "version": "v4",
                "personalization_survey_submitted_at": "2025-01-22T02:45:22.428Z",
                "personalization_survey_n8n_version": "1.74.3",
                "companySize": "<20",
                "companyType": "digital-agency",
                "role": "business-owner",
                "reportedSource": "youtube"
              },
              "settings": {
                "userActivated": true,
                "easyAIWorkflowOnboarded": true,
                "firstSuccessfulWorkflowId": "TotyBJ1rIIIGlYrK",
                "userActivatedAt": 1737997390312,
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1739558292687
                }
              },
              "role": "global:owner",
              "disabled": false,
              "mfaEnabled": false,
              "isPending": false,
              "isOwner": true
            }
          }
        ]
      }
    }
  ],
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "tags": [
    {
      "createdAt": "2025-02-21T17:21:41.750Z",
      "updatedAt": "2025-02-21T17:21:41.750Z",
      "id": "hCxs00bYB7kqJnEo",
      "name": "WORKING"
    }
  ],
  "triggerCount": 3,
  "updatedAt": "2025-03-07T16:58:44.000Z",
  "versionId": "b03538ca-0603-4de3-8000-40e5ecf0b795"
}
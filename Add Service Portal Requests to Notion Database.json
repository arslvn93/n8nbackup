{
  "active": true,
  "connections": {
    "Code2": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video Editing": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Buyer Case Study": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Seller Case Study": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Giveaway": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Open House": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Listing Ad": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-03-12T16:53:25.488Z",
  "id": "Ixasv6IQvXxxfwdF",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Add Service Portal Requests to Notion Database",
  "nodes": [
    {
      "parameters": {
        "jsCode": "// Process the form data and prepare it for Notion API\nconst processedItems = $input.all().map(item => {\n  try {\n    // Get form data\n    const formData = item.json;\n    \n    // Extract form title (use Address or another primary field as the page title)\n    const pageTitle = formData.Address || \"Form Submission\";\n    \n    // Create content blocks for Notion\n    const contentBlocks = [];\n    \n    // Add title block\n    contentBlocks.push({\n      object: \"block\",\n      type: \"heading_1\",\n      heading_1: {\n        rich_text: [{\n          type: \"text\",\n          text: { content: pageTitle }\n        }]\n      }\n    });\n    \n    // Process each field in the form data\n    for (const [question, answer] of Object.entries(formData)) {\n      // Skip internal fields or metadata\n      if (question.startsWith('_') || question === 'markdown' || question === 'error') {\n        continue;\n      }\n      \n      // Format the question (remove asterisks and trim)\n      const formattedQuestion = question.replace(/\\*/g, '').trim();\n      \n      // Add question as heading\n      contentBlocks.push({\n        object: \"block\",\n        type: \"heading_3\",\n        heading_3: {\n          rich_text: [{\n            type: \"text\",\n            text: { content: formattedQuestion }\n          }]\n        }\n      });\n      \n      // Format the answer based on its type\n      let formattedAnswer;\n      let blockType = \"paragraph\";\n      \n      if (answer === undefined || answer === null) {\n        formattedAnswer = 'Not provided';\n      } else if (Array.isArray(answer)) {\n        formattedAnswer = answer.join(', ');\n      } else if (typeof answer === 'object') {\n        // Handle nested objects (like the emotions field)\n        formattedAnswer = Object.entries(answer)\n          .map(([key, val]) => `${key}: ${val}`)\n          .join(', ');\n      } else if (typeof answer === 'boolean') {\n        formattedAnswer = answer ? 'Yes' : 'No';\n      } else {\n        formattedAnswer = String(answer);\n      }\n      \n      // Check if this is an image URL\n      const isImage = typeof answer === 'string' && \n                (answer.includes('api.typeform.com/responses/files') || \n                 (answer.startsWith('http') && \n                  (answer.endsWith('.jpg') || answer.endsWith('.png') || \n                   answer.endsWith('.jpeg') || answer.endsWith('.gif'))));\n      \n      if (isImage) {\n        // Add image block\n        contentBlocks.push({\n          object: \"block\",\n          type: \"image\",\n          image: {\n            type: \"external\",\n            external: {\n              url: answer\n            }\n          }\n        });\n      } else {\n        // Add text block\n        contentBlocks.push({\n          object: \"block\",\n          type: \"paragraph\",\n          paragraph: {\n            rich_text: [{\n              type: \"text\",\n              text: { content: formattedAnswer }\n            }]\n          }\n        });\n      }\n    }\n    \n    // Prepare data for Notion API\n    item.json.notionData = {\n      parent: {\n        // Replace with your actual database ID\n        database_id: \"1b41d08c-4f5a-80c1-a843-f04215bd0fd0\"\n      },\n      properties: {\n        // This assumes your database has a \"Name\" property - adjust as needed\n        \"Name\": {\n          title: [\n            {\n              text: {\n                content: pageTitle\n              }\n            }\n          ]\n        }\n      },\n      children: contentBlocks\n    };\n    \n    return item;\n  } catch (error) {\n    // Handle errors gracefully\n    console.error('Error processing form data:', error.message);\n    item.json.error = error.message;\n    return item;\n  }\n});\n\n// Return the processed items\nreturn processedItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -140,
        -160
      ],
      "id": "69b40348-7c64-4e3c-9486-48ccff56c499",
      "name": "Code2",
      "retryOnFail": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.notion.com/v1/pages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer ntn_y77938235783grxbphRwEazxtixxh4eENsIdl2RRJyW9fy"
            },
            {
              "name": "Notion-Version",
              "value": "2022-06-28"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.notionData }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        140,
        -160
      ],
      "id": "5d016e75-b172-461e-9a53-a8496ccfac2a",
      "name": "HTTP Request",
      "retryOnFail": true
    },
    {
      "parameters": {
        "formId": "H9XPgQte"
      },
      "type": "n8n-nodes-base.typeformTrigger",
      "typeVersion": 1.1,
      "position": [
        -560,
        -320
      ],
      "id": "9c9bc977-148a-4030-a371-739ff2e16b41",
      "name": "Video Editing",
      "webhookId": "990b1329-6433-49a8-859e-ec8528f35f33",
      "credentials": {
        "typeformApi": {
          "id": "hZKxcP6jseCjV38y",
          "name": "Typeform account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "formId": "HbCQNvzV"
      },
      "type": "n8n-nodes-base.typeformTrigger",
      "typeVersion": 1.1,
      "position": [
        -560,
        -140
      ],
      "id": "ca4ad8fb-bb01-4beb-8652-015e74b51473",
      "name": "Buyer Case Study",
      "webhookId": "990b1329-6433-49a8-859e-ec8528f35f33",
      "credentials": {
        "typeformApi": {
          "id": "hZKxcP6jseCjV38y",
          "name": "Typeform account"
        }
      }
    },
    {
      "parameters": {
        "formId": "e8uN9Z02"
      },
      "type": "n8n-nodes-base.typeformTrigger",
      "typeVersion": 1.1,
      "position": [
        -560,
        40
      ],
      "id": "019f8a7e-cad1-4dbc-9c99-44e6775c2267",
      "name": "Seller Case Study",
      "webhookId": "990b1329-6433-49a8-859e-ec8528f35f33",
      "credentials": {
        "typeformApi": {
          "id": "hZKxcP6jseCjV38y",
          "name": "Typeform account"
        }
      }
    },
    {
      "parameters": {
        "formId": "UnqmDFFM"
      },
      "type": "n8n-nodes-base.typeformTrigger",
      "typeVersion": 1.1,
      "position": [
        -560,
        220
      ],
      "id": "a1f2bfef-05b9-420b-9683-5cf3a9622f19",
      "name": "Giveaway",
      "webhookId": "990b1329-6433-49a8-859e-ec8528f35f33",
      "credentials": {
        "typeformApi": {
          "id": "hZKxcP6jseCjV38y",
          "name": "Typeform account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "formId": "SPun7E3e"
      },
      "type": "n8n-nodes-base.typeformTrigger",
      "typeVersion": 1.1,
      "position": [
        -560,
        400
      ],
      "id": "777ef9a8-e839-4e83-9c62-dd52846c2cd8",
      "name": "Open House",
      "webhookId": "990b1329-6433-49a8-859e-ec8528f35f33",
      "credentials": {
        "typeformApi": {
          "id": "hZKxcP6jseCjV38y",
          "name": "Typeform account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "formId": "vujZTuzj"
      },
      "type": "n8n-nodes-base.typeformTrigger",
      "typeVersion": 1.1,
      "position": [
        -560,
        -500
      ],
      "id": "27d31b18-cf71-49bc-9d85-c9af1895f31e",
      "name": "Listing Ad",
      "webhookId": "990b1329-6433-49a8-859e-ec8528f35f33",
      "credentials": {
        "typeformApi": {
          "id": "hZKxcP6jseCjV38y",
          "name": "Typeform account"
        }
      },
      "disabled": true
    }
  ],
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-03-12T16:53:25.494Z",
      "updatedAt": "2025-03-12T16:53:25.494Z",
      "role": "workflow:owner",
      "workflowId": "Ixasv6IQvXxxfwdF",
      "projectId": "JPifOz0qwqZ4t1q3",
      "project": {
        "createdAt": "2025-01-22T02:43:20.320Z",
        "updatedAt": "2025-01-22T02:44:04.001Z",
        "id": "JPifOz0qwqZ4t1q3",
        "name": "Emma Pace <emma@salesgenius.co>",
        "type": "personal",
        "icon": null,
        "projectRelations": [
          {
            "createdAt": "2025-01-22T02:43:20.320Z",
            "updatedAt": "2025-01-22T02:43:20.320Z",
            "role": "project:personalOwner",
            "userId": "f8bb0fb6-1857-45fa-9ac1-27b6e6497323",
            "projectId": "JPifOz0qwqZ4t1q3",
            "user": {
              "createdAt": "2025-01-22T02:43:19.556Z",
              "updatedAt": "2025-02-14T18:38:15.546Z",
              "id": "f8bb0fb6-1857-45fa-9ac1-27b6e6497323",
              "email": "emma@salesgenius.co",
              "firstName": "Emma",
              "lastName": "Pace",
              "personalizationAnswers": {
                "version": "v4",
                "personalization_survey_submitted_at": "2025-01-22T02:45:22.428Z",
                "personalization_survey_n8n_version": "1.74.3",
                "companySize": "<20",
                "companyType": "digital-agency",
                "role": "business-owner",
                "reportedSource": "youtube"
              },
              "settings": {
                "userActivated": true,
                "easyAIWorkflowOnboarded": true,
                "firstSuccessfulWorkflowId": "TotyBJ1rIIIGlYrK",
                "userActivatedAt": 1737997390312,
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1739558292687
                }
              },
              "role": "global:owner",
              "disabled": false,
              "mfaEnabled": false,
              "isPending": false,
              "isOwner": true
            }
          }
        ]
      }
    }
  ],
  "staticData": {
    "node:Video Editing": {},
    "node:Buyer Case Study": {
      "webhookId": "n8n-rp9odpfi47"
    },
    "node:Seller Case Study": {
      "webhookId": "n8n-b5msnkpsts"
    },
    "node:Giveaway": {},
    "node:Open House": {},
    "node:Listing Ad": {}
  },
  "tags": [
    {
      "createdAt": "2025-02-21T17:21:41.750Z",
      "updatedAt": "2025-02-21T17:21:41.750Z",
      "id": "hCxs00bYB7kqJnEo",
      "name": "WORKING"
    }
  ],
  "triggerCount": 2,
  "updatedAt": "2025-04-10T16:27:04.000Z",
  "versionId": "082891ca-6ccd-4c56-8990-1b54e26388ad"
}
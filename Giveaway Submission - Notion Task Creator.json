{
  "active": true,
  "connections": {
    "All Inputs": {
      "main": [
        [
          {
            "node": "Find Contact on Notion1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Contact on Notion1": {
      "main": [
        [
          {
            "node": "Contact Exists?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Contact Exists?": {
      "main": [
        [
          {
            "node": "Find Client",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create new Contact",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new Contact": {
      "main": [
        [
          {
            "node": "Create new Client",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new Client": {
      "main": [
        [
          {
            "node": "set fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set fields": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "set client fields": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Client": {
      "main": [
        [
          {
            "node": "set client fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Typeform Trigger": {
      "main": [
        [
          {
            "node": "All Inputs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Prepare Tasks Array": {
      "main": [
        [
          {
            "node": "Create All Tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Create Client Deliverables Page for Giveaway",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Client Deliverables Page for Giveaway": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Create New Service Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Aggregate Task IDs": {
      "main": [
        []
      ]
    },
    "Create All Tasks": {
      "main": [
        [
          {
            "node": "Code - Aggregate Task IDs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create New Service Request": {
      "main": [
        [
          {
            "node": "Ad Campaign Required",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Client Campaign Page": {
      "main": [
        [
          {
            "node": "Code - Prepare Tasks Array",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ad Campaign Required": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Prep Campaign Notion Page",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code - Prepare Tasks Array1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prep Campaign Notion Page": {
      "main": [
        [
          {
            "node": "Create Client Campaign Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Prepare Tasks Array1": {
      "main": [
        [
          {
            "node": "Create All Tasks1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create All Tasks1": {
      "main": [
        [
          {
            "node": "Code - Aggregate Task IDs1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-04-09T14:45:01.068Z",
  "id": "7rRCi4Lx2wNjCpjB",
  "meta": null,
  "name": "Giveaway Submission - Notion Task Creator",
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5e89dbc1-d32f-45ba-9c38-de7364b44498",
              "name": "First name",
              "value": "={{ $json['First name'] }}",
              "type": "string"
            },
            {
              "id": "e0dbe9cf-cbd0-4170-a3d1-874dcd6a9b02",
              "name": "Email",
              "value": "={{ $json.Email }}",
              "type": "string"
            },
            {
              "id": "e9172d3a-5550-488b-be19-bc4c6a47dbdc",
              "name": "What type of giveaway would you like to run?",
              "value": "={{ $json['What type of giveaway would you like to run?'] }}",
              "type": "string"
            },
            {
              "id": "d5b828a1-618d-4e98-b9a2-6978515441d8",
              "name": "What is the total value of the giveaway?",
              "value": "={{ $json['What is the total value of the giveaway?'] }}",
              "type": "string"
            },
            {
              "id": "5e28bc93-1893-49ea-9656-c16eae468271",
              "name": "Why did you choose this giveaway that you chose?",
              "value": "={{ $json['Why did you choose this giveaway that you chose?'] }}",
              "type": "string"
            },
            {
              "id": "0e5da71e-129a-48ab-8508-1bdf321ad1b6",
              "name": "When would you like to hold the giveaway draw?",
              "value": "={{ $json['When would you like to hold the giveaway draw?'] }}",
              "type": "string"
            },
            {
              "id": "3bef3296-0229-475c-be1e-71dccf362f3b",
              "name": "When would you like to start promoting the giveaway?",
              "value": "={{ $json['When would you like to start promoting the giveaway?'] }}",
              "type": "string"
            },
            {
              "id": "1b9f7d7c-2518-4a54-a9ae-adc3bdf49829",
              "name": "What should participants know before entering?",
              "value": "={{ $json['What should participants know before entering?'] }}",
              "type": "string"
            },
            {
              "id": "5f1b249d-864a-45b3-ae0b-3aaa38f75846",
              "name": "Who is your target audience for this giveaway?",
              "value": "={{ $json['Who is your target audience for this giveaway?'] }}",
              "type": "string"
            },
            {
              "id": "46b6eba5-7580-408c-9a7d-46ac10217dc8",
              "name": "How would you like to promote this Giveaway?",
              "value": "={{ $json['How would you like to promote this Giveaway?'] }}",
              "type": "array"
            },
            {
              "id": "21e3527e-5611-49c4-871b-b48e14238219",
              "name": "What is your daily budget for the giveaway ad campaign?",
              "value": "={{ $json['What is your daily budget for the giveaway ad campaign?'] }}",
              "type": "string"
            },
            {
              "id": "5fdf407f-1e4f-4dbb-9aed-5282c5df47fa",
              "name": "What City / Area would you like the ad campaign to target",
              "value": "={{ $json['What City / Area would you like the ad campaign to target'] }}",
              "type": "string"
            },
            {
              "id": "b3b6739e-d974-4867-ae02-b8a55a2cf6b3",
              "name": "When would you like to STOP the ad campaign",
              "value": "={{ $json['When would you like to STOP the ad campaign'] }}",
              "type": "string"
            },
            {
              "id": "359ef9e0-293c-464d-9afd-c387800d4c15",
              "name": "Please upload a relevant photo related to your giveaway theme.",
              "value": "={{ $json['Please upload a relevant photo related to your giveaway theme.'] }}",
              "type": "string"
            },
            {
              "id": "b2ea9166-669b-4404-aae3-07a2a1babeba",
              "name": "What is the objective of the Ad",
              "value": "={{ $json['What is the objective of the Ad'] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        160,
        -900
      ],
      "id": "3f508393-7796-4a0e-b4c3-e72dd669dd3c",
      "name": "All Inputs"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "1761d08c-4f5a-8016-89dd-f81384652240",
          "mode": "list",
          "cachedResultName": "Contacts",
          "cachedResultUrl": "https://www.notion.so/1761d08c4f5a801689ddf81384652240"
        },
        "returnAll": true,
        "filterType": "manual",
        "filters": {
          "conditions": [
            {
              "key": "email|email",
              "condition": "equals",
              "emailValue": "={{ $('Typeform Trigger').first().json.Email }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        380,
        -900
      ],
      "id": "53638c35-56d9-4250-8a74-aac1691fb7a2",
      "name": "Find Contact on Notion1",
      "alwaysOutputData": true,
      "notesInFlow": false,
      "credentials": {
        "notionApi": {
          "id": "3EhNxVoPGBbOY9vC",
          "name": "Notion account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0c01aa16-f3be-440a-935f-c9acc54f7ab9",
              "leftValue": "={{ $json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        600,
        -900
      ],
      "id": "dedd8f8b-f4b6-4094-99a5-c3413f54a8a3",
      "name": "Contact Exists?"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "value": "1761d08c-4f5a-8016-89dd-f81384652240",
          "mode": "list",
          "cachedResultName": "Contacts",
          "cachedResultUrl": "https://www.notion.so/1761d08c4f5a801689ddf81384652240"
        },
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Client Name|title",
              "title": "={{ $('Typeform Trigger').first().json[\"First name\"] }} {{ $('Typeform Trigger').first().json[\"Last name\"] }}"
            },
            {
              "key": "email_name|rich_text",
              "textContent": "={{ $('Typeform Trigger').first().json[\"First name\"] }}"
            },
            {
              "key": "email|email",
              "emailValue": "={{ $('Typeform Trigger').first().json[\"Email\"] }}"
            },
            {
              "key": "Type|select",
              "selectValue": "Listing Ad"
            }
          ]
        },
        "blockUi": {
          "blockValues": [
            {
              "textContent": "Created through New Listing Ad Submission"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        820,
        -800
      ],
      "id": "42096e58-0337-4172-9cfb-b1e2972083a3",
      "name": "Create new Contact",
      "alwaysOutputData": false,
      "notesInFlow": false,
      "credentials": {
        "notionApi": {
          "id": "3EhNxVoPGBbOY9vC",
          "name": "Notion account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "value": "1491d08c-4f5a-8088-8995-c96c2350b25d",
          "mode": "list",
          "cachedResultName": "Our Clients",
          "cachedResultUrl": "https://www.notion.so/1491d08c4f5a80888995c96c2350b25d"
        },
        "title": "={{ $json.name }}",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Contacts|relation",
              "relationValue": [
                "={{ $json.id }}"
              ]
            }
          ]
        },
        "blockUi": {
          "blockValues": [
            {
              "textContent": "Created through New Listing Ad Submission"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        1040,
        -800
      ],
      "id": "e93bf69c-0f5e-4382-8650-b35c67fe244c",
      "name": "Create new Client",
      "alwaysOutputData": false,
      "notesInFlow": false,
      "credentials": {
        "notionApi": {
          "id": "3EhNxVoPGBbOY9vC",
          "name": "Notion account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e3e1905c-f295-479b-8eb9-a2ddab717559",
              "name": "notion contact id",
              "value": "={{ $('Create new Contact').item.json.id }}",
              "type": "string"
            },
            {
              "id": "0170b413-ddcd-403b-9aef-dc2613fb63da",
              "name": "notion client id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "18e83fc0-cd45-445c-af50-cd0328944eef",
              "name": "first name",
              "value": "={{ $('Typeform Trigger').first().json[\"First name\"] }}",
              "type": "string"
            },
            {
              "id": "693b605d-0f1a-49aa-96c2-664e38d5cf47",
              "name": "email",
              "value": "={{ $('Typeform Trigger').first().json.Email }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1260,
        -800
      ],
      "id": "a9453ddc-3a93-46d3-92b1-dce5d3d7d696",
      "name": "set fields"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e3e1905c-f295-479b-8eb9-a2ddab717559",
              "name": "notion contact id",
              "value": "={{ $('Find Contact on Notion1').item.json.id }}",
              "type": "string"
            },
            {
              "id": "0170b413-ddcd-403b-9aef-dc2613fb63da",
              "name": "notion client id",
              "value": "={{ $('Find Contact on Notion1').item.json.property_clients_brands[0] }}",
              "type": "string"
            },
            {
              "id": "18e83fc0-cd45-445c-af50-cd0328944eef",
              "name": "first name",
              "value": "={{ $json.name }}",
              "type": "string"
            },
            {
              "id": "693b605d-0f1a-49aa-96c2-664e38d5cf47",
              "name": "email",
              "value": "={{ $('Find Contact on Notion1').item.json.property_email }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1260,
        -1000
      ],
      "id": "43dae30e-0bfa-4bc2-97d8-2b560593bb88",
      "name": "set client fields"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1480,
        -900
      ],
      "id": "05b6fc67-911a-4086-962f-523e09299837",
      "name": "Merge"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "get",
        "pageId": {
          "__rl": true,
          "value": "={{ $json.property_clients_brands[0] }}",
          "mode": "id"
        }
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        1040,
        -1000
      ],
      "id": "4ef6a530-5e25-4b67-9676-100d8c23a3b7",
      "name": "Find Client",
      "alwaysOutputData": true,
      "notesInFlow": false,
      "credentials": {
        "notionApi": {
          "id": "3EhNxVoPGBbOY9vC",
          "name": "Notion account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "formId": "UnqmDFFM"
      },
      "type": "n8n-nodes-base.typeformTrigger",
      "typeVersion": 1.1,
      "position": [
        -60,
        -900
      ],
      "id": "b44bf44c-d993-4133-a039-6ebd18a65f03",
      "name": "Typeform Trigger",
      "webhookId": "50af9921-8596-40d4-9bd4-006ad3a262b9",
      "credentials": {
        "typeformApi": {
          "id": "hZKxcP6jseCjV38y",
          "name": "Typeform account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "try {\n    // --- 1. Get Data from Previous Nodes ---\n    const mergeOutput = $('Merge').first().json;\n    const clientRelationId = mergeOutput['notion client id'];\n    const clientName = mergeOutput['first name'];\n\n    if (!clientRelationId) { throw new Error(\"Could not get clientRelationId from Merge node.\"); }\n    if (!clientName) { throw new Error(\"Could not get 'first name' from Merge node.\"); }\n\n    // --- Get Service Request ID and URL ---\n    const serviceRequestNode = $('Create New Service Request');\n    const serviceRequestOutput = serviceRequestNode.first();\n    const serviceRelationId = serviceRequestOutput?.json?.id;\n    const serviceRequestUrl = serviceRequestOutput?.json?.url;\n    \n    if (!serviceRelationId || typeof serviceRelationId !== 'string') {\n        throw new Error(`Failed to get a valid page ID from node 'Create New Service Request'.`);\n    }\n\n    // --- Get Campaign ID (we know it exists on this path) ---\n    const campaignNode = $('Create Client Campaign Page');\n    const campaignOutput = campaignNode.first();\n    const campaignRelationId = campaignOutput?.json?.id;\n    if (!campaignRelationId || typeof campaignRelationId !== 'string') {\n        throw new Error(`Failed to get a valid page ID from node 'Create Client Campaign Page'.`);\n    }\n\n    // --- Get Client Deliverables URL if available ---\n    let clientDeliverableUrl = null;\n    try {\n        clientDeliverableUrl = $('Create Client Deliverables Page for Giveaway').first().json.url;\n    } catch (error) {\n        console.warn(\"Client Deliverables URL not found. This section will be skipped for relevant tasks.\");\n    }\n\n    // --- Get Original Typeform Data ---\n    const formData = $('Typeform Trigger').first().json;\n    if (!formData) {\n        throw new Error(\"Could not get data from Typeform Trigger node.\");\n    }\n\n    // --- Get Ad Campaign Details ---\n    const adObjective = formData[\"What is the objective of the Ad\"] || \"Not specified\";\n    const adBudget = formData[\"What is your daily budget for the giveaway ad campaign?\"] || \"Not specified\";\n    const adEndDate = formData[\"When would you like to STOP the ad campaign\"] || \"Not specified\";\n    const adLocation = formData[\"What City / Area would you like the ad campaign to target\"] || \"Not specified\";\n\n    // Get selected promotions directly from original Typeform data\n    const selectedPromotions = formData[\"How would you like to promote this Giveaway?\"] || [];\n    // Ensure we have an array even if only one option was selected\n    const promotionArray = Array.isArray(selectedPromotions) ? selectedPromotions : [selectedPromotions];\n\n    // --- 2. Define Assignee IDs ---\n    const assigneeMatyas = \"17ad872b594c8163b8360002befd0f21\";\n    const assigneeFernanda = \"1afd872b594c81e9a20d00020d9c9f7c\";\n    const assigneeCopywriter = assigneeFernanda;\n    const assigneeRebecca = \"f633c467e9e44ca8824bd71b46fb02f3\";\n    const assigneeAutomationTeam = assigneeMatyas; // Automation Team tasks to Matyas\n\n    // --- 3. Due Date Calculation ---\n    function getBusinessDaysDueDate(businessDays) {\n        let d = new Date(); let addedDays = 0;\n        if (businessDays === 0) { const day = d.getDay(); if (day !== 0 && day !== 6) return d.toISOString().split('T')[0]; else businessDays = 1; }\n        while (addedDays < businessDays) { d.setDate(d.getDate() + 1); const day = d.getDay(); if (day !== 0 && day !== 6) addedDays++; }\n        return d.toISOString().split('T')[0];\n    }\n    \n    const dueDateToday = getBusinessDaysDueDate(0);\n    const dueDateNextDay = getBusinessDaysDueDate(1);\n    const dueDate2Days = getBusinessDaysDueDate(2);\n    const dueDate3Days = getBusinessDaysDueDate(3);\n    const dueDate5Days = getBusinessDaysDueDate(5);\n\n    // --- 4. Helper Functions ---\n    function formatBlock(type, content, options = {}) { \n        const block = { object: \"block\", type: type }; \n        const data = {}; \n        if (type === 'paragraph' || type.startsWith('heading') || type.endsWith('list_item') || ['toggle', 'quote', 'callout'].includes(type)) { \n            data.rich_text = options.contentRich || [{ type: \"text\", text: { content: content || \"\" } }]; \n            if(options.annotations && !options.contentRich) {data.rich_text[0].annotations = { ...options.annotations };} \n            if (options.color) data.color = options.color; \n            if (options.is_toggleable) data.is_toggleable = options.is_toggleable; \n        } else if (type === 'to_do') { \n            data.rich_text = typeof content === 'string' ? [{ type: \"text\", text: { content: content } }] : (Array.isArray(content) ? content : [{ type: \"text\", text: { content: content || \"\" } }]); \n            if(options.annotations && data.rich_text[0]) {data.rich_text[0].annotations = { ...options.annotations };} \n            data.checked = options.checked || false; \n            if (options.color) data.color = options.color; \n            if (options.children && Array.isArray(options.children)) { \n                data.children = options.children.map(child => formatBlock(child.type, child.content, child)); \n            } \n        } else if (type === 'image') { \n            data.type = \"external\"; \n            data.external = { url: options.url || content || 'https://via.placeholder.com/150' }; \n        } else if (type === 'divider') {} \n        \n        block[type] = data; \n        return block; \n    }\n    \n    // Create service request link block\n    function createServiceRequestLinkBlocks() {\n        const blocks = [];\n        blocks.push(formatBlock(\"divider\", {}));\n        blocks.push(formatBlock(\"heading_3\", \"Giveaway Submission Details\"));\n        \n        if (serviceRequestUrl) {\n            // Create rich text with link\n            blocks.push({\n                object: \"block\",\n                type: \"paragraph\",\n                paragraph: {\n                    rich_text: [\n                        {\n                            type: \"text\",\n                            text: {\n                                content: \"Click Here to View Giveaway Typeform Answers\",\n                                link: { url: serviceRequestUrl }\n                            },\n                            annotations: {\n                                bold: true,\n                                color: \"blue\"\n                            }\n                        }\n                    ]\n                }\n            });\n        } else {\n            blocks.push(formatBlock(\"paragraph\", \"Service Request URL not available\"));\n        }\n        \n        return blocks;\n    }\n\n    // Create client deliverable link block\n    function createClientDeliverableLinkBlocks() {\n        if (!clientDeliverableUrl) return [];\n        \n        const blocks = [];\n        blocks.push(formatBlock(\"divider\", {}));\n        blocks.push(formatBlock(\"heading_3\", \"Client Delivery Notion Page\"));\n        \n        // Create rich text with link\n        blocks.push({\n            object: \"block\",\n            type: \"paragraph\",\n            paragraph: {\n                rich_text: [\n                    {\n                        type: \"text\",\n                        text: {\n                            content: \"Click Here to Access the Client Delivery Notion Page for this Giveaway\",\n                            link: { url: clientDeliverableUrl }\n                        },\n                        annotations: {\n                            bold: true,\n                            color: \"green\"\n                        }\n                    }\n                ]\n            }\n        });\n        \n        return blocks;\n    }\n\n    // Create ad campaign details blocks\n    function createAdCampaignDetailsBlocks() {\n        const blocks = [];\n        blocks.push(formatBlock(\"divider\", {}));\n        blocks.push(formatBlock(\"heading_3\", \"Ad Campaign Details\"));\n        \n        // Campaign Objective\n        blocks.push(formatBlock(\"paragraph\", \"Campaign Objective:\", { annotations: { bold: true } }));\n        blocks.push(formatBlock(\"paragraph\", adObjective));\n        \n        // Budget Per Day\n        blocks.push(formatBlock(\"paragraph\", \"Budget Per Day:\", { annotations: { bold: true } }));\n        blocks.push(formatBlock(\"paragraph\", `$${adBudget}`));\n        \n        // End Date\n        blocks.push(formatBlock(\"paragraph\", \"Campaign End Date:\", { annotations: { bold: true } }));\n        blocks.push(formatBlock(\"paragraph\", adEndDate));\n        \n        // Location\n        blocks.push(formatBlock(\"paragraph\", \"Target Location:\", { annotations: { bold: true } }));\n        blocks.push(formatBlock(\"paragraph\", adLocation));\n        \n        return blocks;\n    }\n\n    const serviceRequestLinkBlocks = createServiceRequestLinkBlocks();\n    const clientDeliverableLinkBlocks = createClientDeliverableLinkBlocks();\n    const adCampaignDetailsBlocks = createAdCampaignDetailsBlocks();\n\n    // --- 5. Create Tasks Array ---\n    let tasksToCreate = [];\n    \n    // Always include these core tasks\n    tasksToCreate.push(\n        // Task 1: Build Funnel Pages (always included)\n        { \n            taskTitle: `Giveaway | ${clientName} | Build Giveaway Funnel Pages`, \n            taskAssignee: [assigneeMatyas], \n            taskPriority: \"High\", \n            taskDueDate: dueDateToday, \n            taskStatus: \"Ready To-Do\", \n            taskBlocks: [\n                formatBlock(\"paragraph\", \"Duplicate and customize funnel in GoHighLevel: Landing Page, Survey Page, Thank You Page.\"),\n                ...serviceRequestLinkBlocks\n            ] \n        },\n        // Task 2: Create Trojan Horse Survey (always included)\n        { \n            taskTitle: `Giveaway | ${clientName} | Create Trojan Horse Survey`, \n            taskAssignee: [assigneeMatyas], \n            taskPriority: \"High\", \n            taskDueDate: dueDateToday, \n            taskStatus: \"Ready To-Do\", \n            taskBlocks: [\n                formatBlock(\"paragraph\", \"Build Trojan Horse-style survey using prompt. Link to Funnel Page 2.\"),\n                ...serviceRequestLinkBlocks\n            ] \n        },\n        // Task 3: Build Automations (always included)\n        { \n            taskTitle: `Giveaway | ${clientName} | Build Automations + CRM Sync`, \n            taskAssignee: [assigneeMatyas], \n            taskPriority: \"High\", \n            taskDueDate: dueDateNextDay, \n            taskStatus: \"Ready To-Do\", \n            taskBlocks: [\n                formatBlock(\"paragraph\", \"Set up automation to tag contacts, notify team/client, push to CRM, store leads in spreadsheet.\"),\n                ...serviceRequestLinkBlocks\n            ] \n        }\n    );\n\n    // Always include Ad Campaign tasks (since we're in the TRUE path)\n    tasksToCreate.push(\n        { \n            taskTitle: `Giveaway | ${clientName} | Design Ad Creatives`, \n            taskAssignee: [assigneeFernanda], \n            taskPriority: \"Medium\", \n            taskDueDate: dueDate2Days, \n            taskStatus: \"Ready To-Do\", \n            taskBlocks: [\n                formatBlock(\"paragraph\", \"Design 2–3 ad creatives using Canva. Upload to Drive.\"),\n                ...serviceRequestLinkBlocks,\n                ...(clientDeliverableUrl ? clientDeliverableLinkBlocks : [])\n            ] \n        },\n        { \n            taskTitle: `Giveaway | ${clientName} | Write Paid Ad Copy`, \n            taskAssignee: [assigneeFernanda], \n            taskPriority: \"Medium\", \n            taskDueDate: dueDate2Days, \n            taskStatus: \"Ready To-Do\", \n            taskBlocks: [\n                formatBlock(\"paragraph\", \"Write ad copy aligned with traffic or engagement objective. Add to Drive.\"),\n                ...serviceRequestLinkBlocks,\n                ...(clientDeliverableUrl ? clientDeliverableLinkBlocks : [])\n            ] \n        },\n        { \n            taskTitle: `Giveaway | ${clientName} | Get Ad Creative & Copy Approval from Client`, \n            taskAssignee: [assigneeFernanda], \n            taskPriority: \"Medium\", \n            taskDueDate: dueDateToday, \n            taskStatus: \"Client BackLog\", \n            taskBlocks: [\n                formatBlock(\"paragraph\", \"Send Deliverable to Client and Get Approval\"),\n                ...serviceRequestLinkBlocks,\n                ...(clientDeliverableUrl ? clientDeliverableLinkBlocks : [])\n            ] \n        },\n        { \n            taskTitle: `Giveaway | ${clientName} | Upload Ad Campaign to Meta`, \n            taskAssignee: [assigneeMatyas], \n            taskPriority: \"Medium\", \n            taskDueDate: dueDate3Days, \n            taskStatus: \"Ready To-Do\", \n            taskBlocks: [\n                formatBlock(\"paragraph\", \"Upload campaign to Meta Ads Manager after copy + creative approval.\"),\n                ...adCampaignDetailsBlocks, // Add the ad campaign details here\n                ...serviceRequestLinkBlocks,\n                ...(clientDeliverableUrl ? clientDeliverableLinkBlocks : [])\n            ] \n        }\n    );\n\n    // Always include post-giveaway nurture tasks\n    tasksToCreate.push(\n        { \n            taskTitle: `Giveaway | ${clientName} | Write 30-Day Nurture Sequence`, \n            taskAssignee: [assigneeCopywriter], \n            taskPriority: \"Medium\", \n            taskDueDate: dueDate5Days, \n            taskStatus: \"Ready To-Do\", \n            taskBlocks: [\n                formatBlock(\"paragraph\", \"Create 5-email nurture sequence for giveaway leads. Upload to Drive & CRM.\"),\n                ...serviceRequestLinkBlocks,\n                ...(clientDeliverableUrl ? clientDeliverableLinkBlocks : [])\n            ] \n        },\n        { \n            taskTitle: `Giveaway | ${clientName} | Link Phone Script for Lead Follow-Up`, \n            taskAssignee: [assigneeFernanda], \n            taskPriority: \"Medium\", \n            taskDueDate: dueDate5Days, \n            taskStatus: \"Ready To-Do\", \n            taskBlocks: [\n                formatBlock(\"paragraph\", \"Write 1 script for phone follow-up with giveaway participants. Upload to Drive.\"),\n                ...serviceRequestLinkBlocks\n            ] \n        }\n    );\n\n    // Check if Organic Social Media Promotion is selected\n    if (promotionArray.some(p => p.includes(\"Social Media\") || p.includes(\"ManyChat\"))) {\n        tasksToCreate.push(\n            { \n                taskTitle: `Giveaway | ${clientName} | Book ManyChat Setup Call`, \n                taskAssignee: [assigneeRebecca], \n                taskPriority: \"Medium\", \n                taskDueDate: dueDateToday, \n                taskStatus: \"Ready To-Do\", \n                taskBlocks: [\n                    formatBlock(\"paragraph\", \"Send client the link to book ManyChat setup call: https://api.leadconnectorhq.com/widget/bookings/social_automation_call\"),\n                    ...serviceRequestLinkBlocks\n                ] \n            },\n            { \n                taskTitle: `Giveaway | ${clientName} | Draft Social Media Script`, \n                taskAssignee: [assigneeFernanda], \n                taskPriority: \"Medium\", \n                taskDueDate: dueDateNextDay, \n                taskStatus: \"Ready To-Do\", \n                taskBlocks: [\n                    formatBlock(\"paragraph\", \"Write IG/FB video script + post captions using Typeform answers. Upload to Drive.\"),\n                    ...serviceRequestLinkBlocks,\n                    ...(clientDeliverableUrl ? clientDeliverableLinkBlocks : [])\n                ] \n            },\n            { \n                taskTitle: `Giveaway | ${clientName} | Build ManyChat Flow`, \n                taskAssignee: [assigneeAutomationTeam], \n                taskPriority: \"Medium\", \n                taskDueDate: dueDate2Days, \n                taskStatus: \"Ready To-Do\", \n                taskBlocks: [\n                    formatBlock(\"paragraph\", \"Create keyword-triggered bot, link to funnel, test flow.\"),\n                    ...serviceRequestLinkBlocks\n                ] \n            },\n            { \n                taskTitle: `Giveaway | ${clientName} | Deliver Script to Client`, \n                taskAssignee: [assigneeRebecca], \n                taskPriority: \"Medium\", \n                taskDueDate: dueDate2Days, \n                taskStatus: \"Ready To-Do\", \n                taskBlocks: [\n                    formatBlock(\"paragraph\", \"Deliver video script and captions via Google Doc for client to record.\"),\n                    ...serviceRequestLinkBlocks,\n                    ...(clientDeliverableUrl ? clientDeliverableLinkBlocks : [])\n                ] \n            },\n            { \n                taskTitle: `Giveaway | ${clientName} | Receive Client Videos for Editing`, \n                taskAssignee: [assigneeFernanda], \n                taskPriority: \"Medium\", \n                taskDueDate: dueDateToday, \n                taskStatus: \"Client BackLog\", \n                taskBlocks: [\n                    formatBlock(\"paragraph\", \"Confirm receipt of videos from client via portal for editing.\"),\n                    ...serviceRequestLinkBlocks,\n                    ...(clientDeliverableUrl ? clientDeliverableLinkBlocks : [])\n                ] \n            },\n            { \n                taskTitle: `Giveaway | ${clientName} | Deliver Final Edited Video`, \n                taskAssignee: [assigneeRebecca], \n                taskPriority: \"Medium\", \n                taskDueDate: dueDateNextDay, \n                taskStatus: \"Ready To-Do\", \n                taskBlocks: [\n                    formatBlock(\"paragraph\", \"Upload final video asset to Drive and notify client to post on IG/FB.\"),\n                    ...serviceRequestLinkBlocks,\n                    ...(clientDeliverableUrl ? clientDeliverableLinkBlocks : [])\n                ] \n            }\n        );\n    }\n\n    // Check if Organic Email Promotion is selected\n    if (promotionArray.some(p => p.includes(\"Email\") && p.includes(\"Promotion\"))) {\n        tasksToCreate.push(\n            { \n                taskTitle: `Giveaway | ${clientName} | Write Promotional Email Sequence (3)`, \n                taskAssignee: [assigneeFernanda], \n                taskPriority: \"Medium\", \n                taskDueDate: dueDate2Days, \n                taskStatus: \"Ready To-Do\", \n                taskBlocks: [\n                    formatBlock(\"paragraph\", \"Write 3 promo emails using prompt and Typeform answers. Upload to Drive.\"),\n                    ...serviceRequestLinkBlocks,\n                    ...(clientDeliverableUrl ? clientDeliverableLinkBlocks : [])\n                ] \n            },\n            { \n                taskTitle: `Giveaway | ${clientName} | Write Winner Announcement Emails (2)`, \n                taskAssignee: [assigneeFernanda], \n                taskPriority: \"Medium\", \n                taskDueDate: dueDate5Days, \n                taskStatus: \"Ready To-Do\", \n                taskBlocks: [\n                    formatBlock(\"paragraph\", \"Email #1: \\\"You've Won!\\\" for winner. Email #2: \\\"Winner Selected\\\" for others.\"),\n                    ...serviceRequestLinkBlocks,\n                    ...(clientDeliverableUrl ? clientDeliverableLinkBlocks : [])\n                ] \n            }\n        );\n    }\n\n    // Check if Mailer Promotion is selected\n    if (promotionArray.some(p => p.includes(\"Mailer\") || p.includes(\"QR Code\"))) {\n        tasksToCreate.push(\n            { \n                taskTitle: `Giveaway | ${clientName} | Generate QR Code for Mailer`, \n                taskAssignee: [assigneeFernanda], \n                taskPriority: \"Medium\", \n                taskDueDate: dueDate2Days, \n                taskStatus: \"Ready To-Do\", \n                taskBlocks: [\n                    formatBlock(\"paragraph\", \"Generate high-res QR code linking to funnel. Upload to Drive.\"),\n                    ...serviceRequestLinkBlocks,\n                    ...(clientDeliverableUrl ? clientDeliverableLinkBlocks : [])\n                ] \n            },\n            { \n                taskTitle: `Giveaway | ${clientName} | Write Mailer Copy`, \n                taskAssignee: [assigneeFernanda], \n                taskPriority: \"Medium\", \n                taskDueDate: dueDate2Days, \n                taskStatus: \"Ready To-Do\", \n                taskBlocks: [\n                    formatBlock(\"paragraph\", \"Draft copy for mailer to include giveaway details and CTA. Add to Drive.\"),\n                    ...serviceRequestLinkBlocks,\n                    ...(clientDeliverableUrl ? clientDeliverableLinkBlocks : [])\n                ] \n            }\n        );\n    }\n\n    // --- 6. Add Common Properties to Each Task ---\n    tasksToCreate.forEach(task => {\n        task.taskClientRelationId = [clientRelationId];\n        task.taskServiceRelationId = [serviceRelationId];\n        task.taskCampaignRelationId = [campaignRelationId]; // Always add campaign ID on this path\n        task.taskTags = [\"Giveaway\"];\n    });\n\n    // --- 7. Return the Array of Tasks ---\n    return tasksToCreate;\n\n} catch (error) {\n    console.error(\"Error in Task Generator With Campaign:\", error.message);\n    throw error; // Re-throw error to stop workflow\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3240,
        -1000
      ],
      "id": "105f5c7d-5af8-4480-8283-1700cc9ccb40",
      "name": "Code - Prepare Tasks Array"
    },
    {
      "parameters": {
        "jsCode": "// Code Node: Dynamic Task ID Aggregator\n\n// Get all the created task pages\nconst createdTasks = $input.all();\n\n// Initialize results object\nconst results = {\n  allTasks: [],\n  tasksByCategory: {\n    coreTasks: [],\n    adTasks: [],\n    socialTasks: [],\n    emailTasks: [],\n    mailerTasks: [],\n    nurtureTasks: []\n  },\n  tasksByKeyword: {}\n};\n\n// Define keywords for task categories\nconst categoryKeywords = {\n  // Core tasks\n  coreTasks: [\"Funnel Pages\", \"Trojan Horse Survey\", \"Build Automations\", \"CRM Sync\"],\n  \n  // Ad campaign tasks\n  adTasks: [\"Ad Creatives\", \"Ad Copy\", \"Ad Approval\", \"Upload Ad Campaign\", \"Campaign to Meta\"],\n  \n  // Social media tasks\n  socialTasks: [\"ManyChat\", \"Social Media Script\", \"Script to Client\", \"Videos for Editing\", \"Edited Video\"],\n  \n  // Email tasks\n  emailTasks: [\"Email Sequence\", \"Winner Announcement\", \"Promotional Email\"],\n  \n  // Mailer tasks\n  mailerTasks: [\"QR Code\", \"Mailer Copy\"],\n  \n  // Nurture tasks\n  nurtureTasks: [\"Nurture Sequence\", \"Phone Script\", \"Lead Follow-Up\"]\n};\n\n// Process each task from the created tasks\nfor (const task of createdTasks) {\n  // Extract task details\n  try {\n    const taskData = task.json;\n    \n    // Get the task ID\n    const taskId = taskData.id;\n    \n    // Get the task title\n    const taskTitle = taskData.properties?.[\"Task Title\"]?.title?.[0]?.plain_text || \"\";\n    \n    // Get the task status\n    const taskStatus = taskData.properties?.Status?.status?.name || \"\";\n    \n    // Get the task priority\n    const taskPriority = taskData.properties?.Priority?.select?.name || \"\";\n    \n    // Get the task assignee\n    const taskAssignee = taskData.properties?.Assignee?.people?.[0]?.name || \"\";\n    \n    // Get the task URL\n    const taskUrl = taskData.url || \"\";\n    \n    // Create task object\n    const taskObject = {\n      id: taskId,\n      title: taskTitle,\n      status: taskStatus,\n      priority: taskPriority,\n      assignee: taskAssignee,\n      url: taskUrl\n    };\n    \n    // Add to all tasks array\n    results.allTasks.push(taskObject);\n    \n    // Categorize by task type based on keywords\n    for (const [category, keywords] of Object.entries(categoryKeywords)) {\n      if (keywords.some(keyword => taskTitle.includes(keyword))) {\n        results.tasksByCategory[category].push(taskObject);\n      }\n    }\n    \n    // Create keyword-based task lookup\n    const words = taskTitle.split(' ');\n    for (const word of words) {\n      if (word.length > 3) { // Only use meaningful words\n        const cleanWord = word.toLowerCase().replace(/[^a-z0-9]/g, '');\n        if (!results.tasksByKeyword[cleanWord]) {\n          results.tasksByKeyword[cleanWord] = [];\n        }\n        results.tasksByKeyword[cleanWord].push(taskObject);\n      }\n    }\n    \n  } catch (error) {\n    console.warn(`Error processing task: ${error.message}`);\n  }\n}\n\n// Add summary counts\nresults.counts = {\n  total: results.allTasks.length,\n  core: results.tasksByCategory.coreTasks.length,\n  ad: results.tasksByCategory.adTasks.length,\n  social: results.tasksByCategory.socialTasks.length,\n  email: results.tasksByCategory.emailTasks.length,\n  mailer: results.tasksByCategory.mailerTasks.length,\n  nurture: results.tasksByCategory.nurtureTasks.length\n};\n\n// Add feature flags to indicate if certain task types exist\nresults.hasAdTasks = results.tasksByCategory.adTasks.length > 0;\nresults.hasSocialTasks = results.tasksByCategory.socialTasks.length > 0;\nresults.hasEmailTasks = results.tasksByCategory.emailTasks.length > 0;\nresults.hasMailerTasks = results.tasksByCategory.mailerTasks.length > 0;\n\n// Return the results\nreturn { json: results };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3680,
        -1000
      ],
      "id": "e5dc3ac8-d698-4fcc-9866-d01c38e91d87",
      "name": "Code - Aggregate Task IDs"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "value": "1c01d08c-4f5a-80b2-a3ea-c867420dcda2",
          "mode": "list",
          "cachedResultName": "Client Deliverables",
          "cachedResultUrl": "https://www.notion.so/1c01d08c4f5a80b2a3eac867420dcda2"
        },
        "title": "={{ $('Merge').first().json[\"first name\"] }} - Giveaway",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Our Clients|relation",
              "relationValue": [
                "={{ $('Merge').first().json[\"notion client id\"] }}"
              ]
            },
            {
              "key": "Type|select",
              "selectValue": "Giveaway"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        1700,
        -900
      ],
      "id": "79c501c1-1528-4481-bc22-ea56644c15e4",
      "name": "Create Client Deliverables Page for Giveaway",
      "credentials": {
        "notionApi": {
          "id": "3EhNxVoPGBbOY9vC",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// --- Code Node for Creating Service Request Page ---\n\n// Use try...catch for robust error handling\ntry {\n  // --- 1. Get Data from Previous Nodes ---\n  const formData = $('Typeform Trigger').first().json; // Original Typeform data\n\n  // Get the Client ID from the Merge node\n  const clientId = $('Merge').first().json[\"notion client id\"];\n  if (!clientId) {\n      throw new Error(\"Could not find 'notion client id' from Merge node.\");\n  }\n\n  // Get the Campaign ID from the node where the campaign page was created\n  // *** IMPORTANT: Verify this node name is correct. Is it 'Create New Listing Ad Campaign' or 'Create Client Campaign Page'? Using the one from your code block. ***\n\n  // --- 2. Define Values for Properties ---\n  let serviceRequestName; // Declare variable\n\n  // Get the actual Client Name passed through the Merge node (ASSUMES upstream nodes pass 'clientName')\n  const clientName = $('Merge').first().json[\"first name\"];\n   if (!clientName) {\n      // Fallback if clientName wasn't found in Merge node output\n      console.warn(\"Client Name ('clientName' field) not found in Merge node output. Falling back to Typeform First Name.\");\n      const firstNameFallback = formData['First name'] || 'Unknown Client';\n      serviceRequestName = `${firstNameFallback} - Giveaway`;\n  } else {\n       // Construct the desired service request name using the Client Name\n       serviceRequestName = `${clientName} - Giveaway`;\n  }\n\n  const requestTypeValue = \"Giveaway\"; // Set the type specifically\n  const submissionDateISO = new Date().toISOString(); // Get current date/time in UTC ISO format\n\n  // --- 3. Generate Content Blocks (Page Body from Typeform) ---\n  const contentBlocks = [];\n\n  // Add a title block to the page body for clarity\n  contentBlocks.push({\n    object: \"block\",\n    type: \"heading_1\",\n    heading_1: {\n      rich_text: [{\n        type: \"text\",\n        text: { content: serviceRequestName } // Use the defined name\n      }]\n    }\n  });\n\n  // Add a divider\n  contentBlocks.push({ object: \"block\", type: \"divider\", divider: {} });\n\n  // Loop through original Typeform data to create Q&A blocks\n  for (const [question, answer] of Object.entries(formData)) {\n    // Skip internal/metadata fields\n    if (question.startsWith('_') || question === 'markdown' || question === 'error' || question === 'event_id' || question === 'event_type' || question === 'form_response') {\n      continue;\n    }\n\n    const formattedQuestion = question.replace(/\\*/g, '').trim();\n\n    // Add question as heading\n    contentBlocks.push({\n      object: \"block\",\n      type: \"heading_3\",\n      heading_3: {\n        rich_text: [{ type: \"text\", text: { content: formattedQuestion } }],\n         \"color\": \"default\"\n      }\n    });\n\n    // Format the answer\n    let formattedAnswer;\n    if (answer === undefined || answer === null || answer === '') {\n      formattedAnswer = 'Not provided';\n    } else if (Array.isArray(answer)) {\n      formattedAnswer = answer.join(', ');\n    } else if (typeof answer === 'object' && answer !== null && !Array.isArray(answer) && !(answer instanceof Date)) {\n       if (answer.hasOwnProperty('url') && answer.hasOwnProperty('name')) {\n          formattedAnswer = answer.url; // Handle file objects\n       } else {\n           formattedAnswer = JSON.stringify(answer); // Stringify other objects\n       }\n    } else if (typeof answer === 'boolean') {\n      formattedAnswer = answer ? 'Yes' : 'No';\n    } else {\n      formattedAnswer = String(answer);\n    }\n\n    // Check for image URLs\n    const isImageUrl = typeof formattedAnswer === 'string' &&\n                    (formattedAnswer.includes('api.typeform.com/responses/files') ||\n                     (formattedAnswer.startsWith('http') &&\n                      (formattedAnswer.endsWith('.jpg') || formattedAnswer.endsWith('.png') ||\n                       formattedAnswer.endsWith('.jpeg') || formattedAnswer.endsWith('.gif'))));\n\n    if (isImageUrl) {\n      // Add image block\n      contentBlocks.push({\n        object: \"block\", type: \"image\", image: { type: \"external\", external: { url: formattedAnswer } }\n      });\n    } else {\n      // Add text block\n      contentBlocks.push({\n        object: \"block\", type: \"paragraph\", paragraph: { rich_text: [{ type: \"text\", text: { content: formattedAnswer } }], \"color\": \"default\" }\n      });\n    }\n     // Optional spacer\n     contentBlocks.push({ object: \"block\", type: \"paragraph\", paragraph: { rich_text: [] } });\n  } // End of Q&A loop\n\n  // --- 4. Prepare Data for Notion API ---\n  const notionDataPayload = {\n    parent: {\n      // The Database ID for your *Service Requests* database\n      database_id: \"1b41d08c4f5a80c1a843f04215bd0fd0\"\n    },\n    icon: {\n      type: \"emoji\",\n      emoji: \"🎁\" // Using Gift icon as requested in previous code block\n    },\n    properties: {\n      // Title Property: Name\n      \"Name\": {\n        title: [{ text: { content: serviceRequestName } }] // Now uses Client Name - Giveaway\n      },\n      // Select Property: Request Type\n      \"Request Type\": {\n        select: { // Assumes 'select' type. If multi_select, change structure\n          name: requestTypeValue\n        }\n        /* --- If Request Type is MULTI_SELECT, use this instead: ---\n        multi_select: [\n          { name: requestTypeValue }\n        ]\n        */\n      },\n      // Relation Property: Client\n      \"Client\": {\n        relation: [{ id: clientId }]\n      },\n\n      // Date Property: Submission Date\n      \"Submission Date\": {\n        date: {\n          start: submissionDateISO // Use the ISO UTC string\n        }\n      }\n    },\n    // Page Body Content: Children\n    children: contentBlocks\n  };\n\n  // --- 5. Return the Payload ---\n  // Output the data needed for the subsequent HTTP Request node\n  return { json: { notionData: notionDataPayload } };\n\n} catch (error) {\n  // --- Error Handling ---\n  console.error('Error preparing Service Request Notion data:', error.message);\n  // Throw the error again to potentially stop the workflow or let error workflow handle it\n  throw error; // Stop workflow on error\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1920,
        -900
      ],
      "id": "7eb882da-9aaa-4892-8a64-515345c59cc0",
      "name": "Code",
      "retryOnFail": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.notion.com/v1/pages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer ntn_y77938235783grxbphRwEazxtixxh4eENsIdl2RRJyW9fy"
            },
            {
              "name": "Notion-Version",
              "value": "2022-06-28"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $('Code').item.json.notionData }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2140,
        -900
      ],
      "id": "daee332c-2a38-4f54-bd6a-52fc642c15cf",
      "name": "Create New Service Request",
      "retryOnFail": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.notion.com/v1/pages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer ntn_y77938235783grxbphRwEazxtixxh4eENsIdl2RRJyW9fy"
            },
            {
              "name": "Notion-Version",
              "value": "2022-06-28"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"parent\": {\n    \"database_id\": \"1491d08c-4f5a-8010-9e47-c82ce7f1f1ea\"\n  },\n  \"icon\": {\n    \"type\": \"emoji\",\n    \"emoji\": \"📝\"\n  },\n  \"properties\": {\n    \"Task Title\": {\n      \"title\": [ { \"text\": { \"content\": \"{{ $json.taskTitle ?? 'Untitled Task' }}\" } } ]\n    },\n    \"Client\": {\n       \"relation\": {{ $json.taskClientRelationId ? JSON.stringify($json.taskClientRelationId.map(id => ({ id: id })) ) : '[]' }}\n    },\n    \"Client Ad Campaigns\": {\n       \"relation\": {{ $json.taskCampaignRelationId ? JSON.stringify($json.taskCampaignRelationId.map(id => ({ id: id })) ) : '[]' }}\n     },\n     \"⚠️ Service Portal Requests\": {\n         \"relation\": {{ $json.taskServiceRelationId ? JSON.stringify($json.taskServiceRelationId.map(id => ({ id: id })) ) : '[]' }}\n     },\n     \"Assignee\": {\n        \"people\": {{ $json.taskAssignee ? JSON.stringify($json.taskAssignee.map(id => ({ id: id })) ) : '[]' }}\n     },\n    \"Due\": {\n       \"date\": {{ $json.taskDueDate ? JSON.stringify({ start: $json.taskDueDate }) : null }}\n    },\n    \"Tags\": {\n        \"multi_select\": {{ $json.taskTags ? JSON.stringify($json.taskTags.map(tag => ({ name: tag })) ) : '[]' }}\n    },\n    \"Status\": {\n        \"status\": { \"name\": \"{{ $json.taskStatus }}\" }\n    },\n    \"Priority\": {\n        \"select\": { \"name\": \"{{ $json.taskPriority }}\" }\n    }\n  },\n  \"children\": {{ $json.taskBlocks ? JSON.stringify($json.taskBlocks) : '[]' }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3460,
        -1000
      ],
      "id": "e7dceeca-127c-49a4-8545-9949e381581a",
      "name": "Create All Tasks",
      "retryOnFail": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.notion.com/v1/pages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer ntn_y77938235783grxbphRwEazxtixxh4eENsIdl2RRJyW9fy"
            },
            {
              "name": "Notion-Version",
              "value": "2022-06-28"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $('Prep Campaign Notion Page').item.json.notionData }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3020,
        -1000
      ],
      "id": "6318a8cf-e511-4f03-a2ed-484680582039",
      "name": "Create Client Campaign Page",
      "retryOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// Simple Promotion Detector for n8n\nconst input = $('All Inputs').first().json;\n\n// Get selected promotion options\nconst selectedPromotions = input[\"How would you like to promote this Giveaway?\"] || [];\n\n// Convert to array if single string\nconst promotionArray = Array.isArray(selectedPromotions) ? selectedPromotions : [selectedPromotions];\n\n// Check if paid ad campaign is selected\nconst needsAdCampaign = promotionArray.some(promo => \n  promo.includes(\"Paid Ad\") || \n  promo.includes(\"Ad Campaign\") || \n  promo.includes(\"Meta Ad\")\n);\n\n// Return simple result\nreturn {\n  json: {\n    selectedPromotions: promotionArray,\n    needsAdCampaign: needsAdCampaign\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2360,
        -900
      ],
      "id": "07ce5836-f326-4a2c-ac63-8f7c0488aafc",
      "name": "Ad Campaign Required"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b9a2bdff-bddc-4637-a2a1-8a40ff9f1a46",
              "leftValue": "={{ $json.needsAdCampaign }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2580,
        -900
      ],
      "id": "5cd57bee-7ede-40d3-86da-6e1fa53868f5",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "// --- Code Node: Prepare Campaign Page Data ---\n// Runs AFTER Merge node, but uses data from Typeform Trigger and Merge\n\ntry {\n  // --- 1. Get Data from Original Sources ---\n\n  // Get original Typeform data\n  const formData = $('Typeform Trigger').first().json;\n  if (!formData) {\n      throw new Error(\"Could not get data from Typeform Trigger node.\");\n  }\n\n  // Get the Client ID from the Merge node's output\n  const mergeOutput = $('Merge').first().json;\n  const clientId = mergeOutput['notion client id'];\n  if (!clientId) {\n      // It's crucial clientId exists from the Merge node\n      throw new Error(\"Could not find 'notion client id' in the output from Merge node.\");\n  }\n\n  // Get Client Deliverables relation ID (if available)\n  let clientDeliverablesId = null;\n  try {\n    clientDeliverablesId = $('Create Client Deliverables Page for Giveaway').first().json.id;\n  } catch (error) {\n    console.warn(\"Client Deliverables ID not found. This relation will be empty.\");\n  }\n\n  // --- 2. Define Page Title & Type (using Typeform data) ---\n  const firstName = formData['First name'] || 'Client';\n  const pageTitle = `${firstName} - Giveaway`;\n  const campaignTypeValue = \"Giveaway\";\n\n  // --- 3. Get Campaign Properties from Typeform ---\n  // Campaign Objective (select)\n  const objective = formData[\"What is the objective of the Ad\"] || null;\n  \n  // Budget Per Day (number)\n  const budget = formData[\"What is your daily budget for the giveaway ad campaign?\"] || null;\n  const budgetNumber = budget ? parseFloat(budget) : null;\n  \n  // End Date (date)\n  const endDate = formData[\"When would you like to STOP the ad campaign\"] || null;\n  \n  // Location (text)\n  const location = formData[\"What City / Area would you like the ad campaign to target\"] || null;\n\n  // --- 4. Calculate Start Date ---\n  function getBusinessDaysDueDate(businessDays) {\n    let d = new Date();\n    let addedDays = 0;\n    while (addedDays < businessDays) {\n      d.setDate(d.getDate() + 1);\n      const dayOfWeek = d.getDay(); // 0 = Sunday, 6 = Saturday\n      if (dayOfWeek !== 0 && dayOfWeek !== 6) {\n        addedDays++;\n      }\n    }\n    return d.toISOString().split('T')[0]; // YYYY-MM-DD\n  }\n  const startDateString = getBusinessDaysDueDate(3); // Today + 3 business days\n\n  // --- 5. Generate Content Blocks (Page Body from Typeform data) ---\n  const contentBlocks = [];\n  contentBlocks.push({ object: \"block\", type: \"heading_1\", heading_1: { rich_text: [{ type: \"text\", text: { content: pageTitle } }] } });\n  contentBlocks.push({ object: \"block\", type: \"divider\", divider: {} });\n\n  for (const [question, answer] of Object.entries(formData)) {\n    // Skip internal Typeform fields\n     if (question.startsWith('_') || ['markdown', 'error', 'event_id', 'event_type', 'form_response'].includes(question)) {\n        continue;\n    }\n\n    const formattedQuestion = question.replace(/\\*/g, '').trim();\n    contentBlocks.push({ object: \"block\", type: \"heading_3\", heading_3: { rich_text: [{ type: \"text\", text: { content: formattedQuestion } }], \"color\": \"default\" } });\n\n    let formattedAnswer;\n    if (answer === undefined || answer === null || answer === '') { formattedAnswer = 'Not provided'; }\n    else if (Array.isArray(answer)) { formattedAnswer = answer.join(', '); }\n    else if (typeof answer === 'object' && answer !== null && !(answer instanceof Date)) { formattedAnswer = (answer.hasOwnProperty('url') && answer.hasOwnProperty('name')) ? answer.url : JSON.stringify(answer); }\n    else if (typeof answer === 'boolean') { formattedAnswer = answer ? 'Yes' : 'No'; }\n    else { formattedAnswer = String(answer); }\n\n    const isImageUrl = typeof formattedAnswer === 'string' && (formattedAnswer.includes('api.typeform.com/responses/files') || (formattedAnswer.startsWith('http') && (/\\.(jpg|png|jpeg|gif)$/i).test(formattedAnswer)));\n\n    if (isImageUrl) {\n      contentBlocks.push({ object: \"block\", type: \"image\", image: { type: \"external\", external: { url: formattedAnswer } } });\n    } else {\n      contentBlocks.push({ object: \"block\", type: \"paragraph\", paragraph: { rich_text: [{ type: \"text\", text: { content: formattedAnswer } }], \"color\": \"default\" } });\n    }\n    contentBlocks.push({ object: \"block\", type: \"paragraph\", paragraph: { rich_text: [] } }); // Spacer\n  }\n\n  // --- 6. Prepare Data Object for Notion API ---\n  const notionDataPayload = {\n    parent: {\n      // Database ID for your \"Campaigns\" database\n      database_id: \"1a41d08c4f5a808b8944c0faa8922503\"\n    },\n    icon: {\n      type: \"emoji\",\n      emoji: \"🎁\" // Giveaway icon\n    },\n    properties: {\n      // Campaign Name (Title)\n      \"Campaign Name\": {\n        title: [ { text: { content: pageTitle } } ]\n      },\n      // Campaign Type (Multi-Select)\n      \"Campaign Type\": {\n        multi_select: [ { name: campaignTypeValue } ]\n      },\n      // Client Relation (using ID from Merge node)\n      \"Client\": {\n        relation: [ { id: clientId } ]\n      },\n      // Start Date\n      \"Start Date\": {\n        date: { start: startDateString }\n      },\n      // NEW PROPERTIES\n      // Campaign Objective (Select)\n      \"Campaign Objective\": objective ? {\n        select: { name: objective }\n      } : null,\n      \n      // Budget Per Day (Number)\n      \"Budget Per Day\": budgetNumber !== null ? {\n        number: budgetNumber\n      } : null,\n      \n      // End Date (Date)\n      \"End Date\": endDate ? {\n        date: { start: endDate }\n      } : null,\n      \n      // Location (Text)\n      \"Location\": location ? {\n        rich_text: [{ type: \"text\", text: { content: location } }]\n      } : null,\n      \n      // Client Deliverables Relation\n      \"⭐ Client Deliverables\": clientDeliverablesId ? {\n        relation: [{ id: clientDeliverablesId }]\n      } : null\n    },\n    children: contentBlocks // Page body content from Typeform\n  };\n\n  // Remove null properties to avoid Notion API errors\n  for (const key in notionDataPayload.properties) {\n    if (notionDataPayload.properties[key] === null) {\n      delete notionDataPayload.properties[key];\n    }\n  }\n\n  // --- 7. Return the Payload for the next node ---\n  // Return as a single item in an array, which is standard n8n practice\n  return [ { json: { notionData: notionDataPayload } } ];\n\n} catch (error) {\n  console.error('Error processing campaign data in Code2:', error.message);\n  // Option 1: Stop the workflow\n  throw error;\n  // Option 2: Return an empty array so subsequent nodes might not run/error\n  // return [];\n  // Option 3: Return an error object (less common unless handled downstream)\n  // return [ { json: { error: `Error processing campaign data: ${error.message}` } } ];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2800,
        -1000
      ],
      "id": "1fce12dc-d83a-4bc9-a079-fc68b2727491",
      "name": "Prep Campaign Notion Page",
      "retryOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// Code Node: Task Generator Without Campaign ID (for FALSE path)\n\ntry {\n    // --- 1. Get Data from Previous Nodes ---\n    const mergeOutput = $('Merge').first().json;\n    const clientRelationId = mergeOutput['notion client id'];\n    const clientName = mergeOutput['first name'];\n\n    if (!clientRelationId) { throw new Error(\"Could not get clientRelationId from Merge node.\"); }\n    if (!clientName) { throw new Error(\"Could not get 'first name' from Merge node.\"); }\n\n    // --- Get Service Request ID and URL ---\n    const serviceRequestNode = $('Create New Service Request');\n    const serviceRequestOutput = serviceRequestNode.first();\n    const serviceRelationId = serviceRequestOutput?.json?.id;\n    const serviceRequestUrl = serviceRequestOutput?.json?.url;\n    \n    if (!serviceRelationId || typeof serviceRelationId !== 'string') {\n        throw new Error(`Failed to get a valid page ID from node 'Create New Service Request'.`);\n    }\n\n    // --- Get Original Typeform Data ---\n    const formData = $('Typeform Trigger').first().json;\n    if (!formData) {\n        throw new Error(\"Could not get data from Typeform Trigger node.\");\n    }\n\n    // Get selected promotions directly from original Typeform data\n    const selectedPromotions = formData[\"How would you like to promote this Giveaway?\"] || [];\n    // Ensure we have an array even if only one option was selected\n    const promotionArray = Array.isArray(selectedPromotions) ? selectedPromotions : [selectedPromotions];\n\n    // --- 2. Define Assignee IDs ---\n    const assigneeMatyas = \"135d872b-594c-815e-8bb4-0002be26fee3\";\n    const assigneeFernanda = \"135d872b-594c-815e-8bb4-0002be26fee3\";\n    const assigneeEmma = assigneeFernanda; // All Emma's tasks go to Fernanda\n    const assigneeCopywriter = assigneeFernanda;\n    const assigneeRebecca = assigneeFernanda;\n    const assigneeAutomationTeam = assigneeMatyas; // Automation Team tasks to Matyas\n\n    // --- 3. Due Date Calculation ---\n    function getBusinessDaysDueDate(businessDays) {\n        let d = new Date(); let addedDays = 0;\n        if (businessDays === 0) { const day = d.getDay(); if (day !== 0 && day !== 6) return d.toISOString().split('T')[0]; else businessDays = 1; }\n        while (addedDays < businessDays) { d.setDate(d.getDate() + 1); const day = d.getDay(); if (day !== 0 && day !== 6) addedDays++; }\n        return d.toISOString().split('T')[0];\n    }\n    \n    const dueDateToday = getBusinessDaysDueDate(0);\n    const dueDateNextDay = getBusinessDaysDueDate(1);\n    const dueDate2Days = getBusinessDaysDueDate(2);\n    const dueDate3Days = getBusinessDaysDueDate(3);\n    const dueDate5Days = getBusinessDaysDueDate(5);\n\n    // --- 4. Helper Functions ---\n    function formatBlock(type, content, options = {}) { \n        const block = { object: \"block\", type: type }; \n        const data = {}; \n        if (type === 'paragraph' || type.startsWith('heading') || type.endsWith('list_item') || ['toggle', 'quote', 'callout'].includes(type)) { \n            data.rich_text = options.contentRich || [{ type: \"text\", text: { content: content || \"\" } }]; \n            if(options.annotations && !options.contentRich) {data.rich_text[0].annotations = { ...options.annotations };} \n            if (options.color) data.color = options.color; \n            if (options.is_toggleable) data.is_toggleable = options.is_toggleable; \n        } else if (type === 'to_do') { \n            data.rich_text = typeof content === 'string' ? [{ type: \"text\", text: { content: content } }] : (Array.isArray(content) ? content : [{ type: \"text\", text: { content: content || \"\" } }]); \n            if(options.annotations && data.rich_text[0]) {data.rich_text[0].annotations = { ...options.annotations };} \n            data.checked = options.checked || false; \n            if (options.color) data.color = options.color; \n            if (options.children && Array.isArray(options.children)) { \n                data.children = options.children.map(child => formatBlock(child.type, child.content, child)); \n            } \n        } else if (type === 'image') { \n            data.type = \"external\"; \n            data.external = { url: options.url || content || 'https://via.placeholder.com/150' }; \n        } else if (type === 'divider') {} \n        \n        block[type] = data; \n        return block; \n    }\n    \n    // Create service request link block\n    function createServiceRequestLinkBlocks() {\n        const blocks = [];\n        blocks.push(formatBlock(\"divider\", {}));\n        blocks.push(formatBlock(\"heading_3\", \"Client Information\"));\n        \n        if (serviceRequestUrl) {\n            // Create rich text with link\n            blocks.push({\n                object: \"block\",\n                type: \"paragraph\",\n                paragraph: {\n                    rich_text: [\n                        {\n                            type: \"text\",\n                            text: {\n                                content: \"View Client Service Request Details\",\n                                link: { url: serviceRequestUrl }\n                            },\n                            annotations: {\n                                bold: true,\n                                color: \"blue\"\n                            }\n                        }\n                    ]\n                }\n            });\n        } else {\n            blocks.push(formatBlock(\"paragraph\", \"Service Request URL not available\"));\n        }\n        \n        return blocks;\n    }\n\n    const serviceRequestLinkBlocks = createServiceRequestLinkBlocks();\n\n    // --- 5. Create Dynamic Tasks Array Based on Selections ---\n    let tasksToCreate = [];\n    \n    // Always include these core tasks\n    tasksToCreate.push(\n        // Task 1: Build Funnel Pages (always included)\n        { \n            taskTitle: `Giveaway | ${clientName} | Build Giveaway Funnel Pages`, \n            taskAssignee: [assigneeMatyas], \n            taskPriority: \"High\", \n            taskDueDate: dueDateToday, \n            taskStatus: \"Ready To-Do\", \n            taskBlocks: [\n                formatBlock(\"paragraph\", \"Duplicate and customize funnel in GoHighLevel: Landing Page, Survey Page, Thank You Page.\"),\n                ...serviceRequestLinkBlocks\n            ] \n        },\n        // Task 2: Create Trojan Horse Survey (always included)\n        { \n            taskTitle: `Giveaway | ${clientName} | Create Trojan Horse Survey`, \n            taskAssignee: [assigneeMatyas], \n            taskPriority: \"High\", \n            taskDueDate: dueDateToday, \n            taskStatus: \"Ready To-Do\", \n            taskBlocks: [\n                formatBlock(\"paragraph\", \"Build Trojan Horse-style survey using prompt. Link to Funnel Page 2.\"),\n                ...serviceRequestLinkBlocks\n            ] \n        },\n        // Task 3: Build Automations (always included)\n        { \n            taskTitle: `Giveaway | ${clientName} | Build Automations + CRM Sync`, \n            taskAssignee: [assigneeMatyas], \n            taskPriority: \"High\", \n            taskDueDate: dueDateNextDay, \n            taskStatus: \"Ready To-Do\", \n            taskBlocks: [\n                formatBlock(\"paragraph\", \"Set up automation to tag contacts, notify team/client, push to CRM, store leads in spreadsheet.\"),\n                ...serviceRequestLinkBlocks\n            ] \n        },\n        // Post-Giveaway Nurture tasks (always included)\n        { \n            taskTitle: `Giveaway | ${clientName} | Write 30-Day Nurture Sequence`, \n            taskAssignee: [assigneeCopywriter], \n            taskPriority: \"Medium\", \n            taskDueDate: dueDate5Days, \n            taskStatus: \"Ready To-Do\", \n            taskBlocks: [\n                formatBlock(\"paragraph\", \"Create 5-email nurture sequence for giveaway leads. Upload to Drive & CRM.\"),\n                ...serviceRequestLinkBlocks\n            ] \n        },\n        { \n            taskTitle: `Giveaway | ${clientName} | Link Phone Script for Lead Follow-Up`, \n            taskAssignee: [assigneeFernanda], \n            taskPriority: \"Medium\", \n            taskDueDate: dueDate5Days, \n            taskStatus: \"Ready To-Do\", \n            taskBlocks: [\n                formatBlock(\"paragraph\", \"Write 1 script for phone follow-up with giveaway participants. Upload to Drive.\"),\n                ...serviceRequestLinkBlocks\n            ] \n        }\n    );\n\n    // Check if Organic Social Media Promotion is selected\n    if (promotionArray.some(p => p.includes(\"Social Media\") || p.includes(\"ManyChat\"))) {\n        tasksToCreate.push(\n            { \n                taskTitle: `Giveaway | ${clientName} | Book ManyChat Setup Call`, \n                taskAssignee: [assigneeRebecca], \n                taskPriority: \"Medium\", \n                taskDueDate: dueDateToday, \n                taskStatus: \"Ready To-Do\", \n                taskBlocks: [\n                    formatBlock(\"paragraph\", \"Send client the link to book ManyChat setup call: https://api.leadconnectorhq.com/widget/bookings/social_automation_call\"),\n                    ...serviceRequestLinkBlocks\n                ] \n            },\n            { \n                taskTitle: `Giveaway | ${clientName} | Draft Social Media Script`, \n                taskAssignee: [assigneeFernanda], \n                taskPriority: \"Medium\", \n                taskDueDate: dueDateNextDay, \n                taskStatus: \"Ready To-Do\", \n                taskBlocks: [\n                    formatBlock(\"paragraph\", \"Write IG/FB video script + post captions using Typeform answers. Upload to Drive.\"),\n                    ...serviceRequestLinkBlocks\n                ] \n            },\n            { \n                taskTitle: `Giveaway | ${clientName} | Build ManyChat Flow`, \n                taskAssignee: [assigneeAutomationTeam], \n                taskPriority: \"Medium\", \n                taskDueDate: dueDate2Days, \n                taskStatus: \"Ready To-Do\", \n                taskBlocks: [\n                    formatBlock(\"paragraph\", \"Create keyword-triggered bot, link to funnel, test flow.\"),\n                    ...serviceRequestLinkBlocks\n                ] \n            },\n            { \n                taskTitle: `Giveaway | ${clientName} | Deliver Script to Client`, \n                taskAssignee: [assigneeRebecca], \n                taskPriority: \"Medium\", \n                taskDueDate: dueDate2Days, \n                taskStatus: \"Ready To-Do\", \n                taskBlocks: [\n                    formatBlock(\"paragraph\", \"Deliver video script and captions via Google Doc for client to record.\"),\n                    ...serviceRequestLinkBlocks\n                ] \n            },\n            { \n                taskTitle: `Giveaway | ${clientName} | Receive Client Videos for Editing`, \n                taskAssignee: [assigneeFernanda], \n                taskPriority: \"Medium\", \n                taskDueDate: dueDateToday, \n                taskStatus: \"Client BackLog\", \n                taskBlocks: [\n                    formatBlock(\"paragraph\", \"Confirm receipt of videos from client via portal for editing.\"),\n                    ...serviceRequestLinkBlocks\n                ] \n            },\n            { \n                taskTitle: `Giveaway | ${clientName} | Deliver Final Edited Video`, \n                taskAssignee: [assigneeRebecca], \n                taskPriority: \"Medium\", \n                taskDueDate: dueDateNextDay, \n                taskStatus: \"Ready To-Do\", \n                taskBlocks: [\n                    formatBlock(\"paragraph\", \"Upload final video asset to Drive and notify client to post on IG/FB.\"),\n                    ...serviceRequestLinkBlocks\n                ] \n            }\n        );\n    }\n\n  // Check if Organic Email Promotion is selected\n    if (promotionArray.some(p => p.includes(\"Email\") && p.includes(\"Promotion\"))) {\n        tasksToCreate.push(\n            { \n                taskTitle: `Giveaway | ${clientName} | Write Promotional Email Sequence (3)`, \n                taskAssignee: [assigneeFernanda], \n                taskPriority: \"Medium\", \n                taskDueDate: dueDate2Days, \n                taskStatus: \"Ready To-Do\", \n                taskBlocks: [\n                    formatBlock(\"paragraph\", \"Write 3 promo emails using prompt and Typeform answers. Upload to Drive.\"),\n                    ...serviceRequestLinkBlocks\n                ] \n            },\n            { \n                taskTitle: `Giveaway | ${clientName} | Write Winner Announcement Emails (2)`, \n                taskAssignee: [assigneeFernanda], \n                taskPriority: \"Medium\", \n                taskDueDate: dueDate5Days, \n                taskStatus: \"Ready To-Do\", \n                taskBlocks: [\n                    formatBlock(\"paragraph\", \"Email #1: \\\"You've Won!\\\" for winner. Email #2: \\\"Winner Selected\\\" for others.\"),\n                    ...serviceRequestLinkBlocks\n                ] \n            }\n        );\n    }\n\n    // Ad campaign tasks are NOT included in this version\n    // This runs only when needsAdCampaign is FALSE\n\n    // Check if Mailer Promotion is selected\n    if (promotionArray.some(p => p.includes(\"Mailer\") || p.includes(\"QR Code\"))) {\n        tasksToCreate.push(\n            { \n                taskTitle: `Giveaway | ${clientName} | Generate QR Code for Mailer`, \n                taskAssignee: [assigneeFernanda], \n                taskPriority: \"Medium\", \n                taskDueDate: dueDate2Days, \n                taskStatus: \"Ready To-Do\", \n                taskBlocks: [\n                    formatBlock(\"paragraph\", \"Generate high-res QR code linking to funnel. Upload to Drive.\"),\n                    ...serviceRequestLinkBlocks\n                ] \n            },\n            { \n                taskTitle: `Giveaway | ${clientName} | Write Mailer Copy`, \n                taskAssignee: [assigneeFernanda], \n                taskPriority: \"Medium\", \n                taskDueDate: dueDate2Days, \n                taskStatus: \"Ready To-Do\", \n                taskBlocks: [\n                    formatBlock(\"paragraph\", \"Draft copy for mailer to include giveaway details and CTA. Add to Drive.\"),\n                    ...serviceRequestLinkBlocks\n                ] \n            }\n        );\n    }\n\n    // --- 6. Add Common Properties to Each Task ---\n    tasksToCreate.forEach(task => {\n        task.taskClientRelationId = [clientRelationId];\n        task.taskServiceRelationId = [serviceRelationId];\n        // No campaign relation ID in this version\n        task.taskTags = [\"Giveaway\"];\n    });\n\n    // --- 7. Return the Array of Tasks ---\n    return tasksToCreate;\n\n} catch (error) {\n    console.error(\"Error in Task Generator Without Campaign:\", error.message);\n    throw error; // Re-throw error to stop workflow\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2800,
        -800
      ],
      "id": "030bf277-302e-416c-a01b-1596347088d9",
      "name": "Code - Prepare Tasks Array1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.notion.com/v1/pages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer ntn_y77938235783grxbphRwEazxtixxh4eENsIdl2RRJyW9fy"
            },
            {
              "name": "Notion-Version",
              "value": "2022-06-28"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"parent\": {\n    \"database_id\": \"1491d08c-4f5a-8010-9e47-c82ce7f1f1ea\"\n  },\n  \"icon\": {\n    \"type\": \"emoji\",\n    \"emoji\": \"📝\"\n  },\n  \"properties\": {\n    \"Task Title\": {\n      \"title\": [ { \"text\": { \"content\": \"{{ $json.taskTitle ?? 'Untitled Task' }}\" } } ]\n    },\n    \"Client\": {\n       \"relation\": {{ $json.taskClientRelationId ? JSON.stringify($json.taskClientRelationId.map(id => ({ id: id })) ) : '[]' }}\n    },\n    \"Client Ad Campaigns\": {\n       \"relation\": {{ $json.taskCampaignRelationId ? JSON.stringify($json.taskCampaignRelationId.map(id => ({ id: id })) ) : '[]' }}\n     },\n     \"⚠️ Service Portal Requests\": {\n         \"relation\": {{ $json.taskServiceRelationId ? JSON.stringify($json.taskServiceRelationId.map(id => ({ id: id })) ) : '[]' }}\n     },\n     \"Assignee\": {\n        \"people\": {{ $json.taskAssignee ? JSON.stringify($json.taskAssignee.map(id => ({ id: id })) ) : '[]' }}\n     },\n    \"Due\": {\n       \"date\": {{ $json.taskDueDate ? JSON.stringify({ start: $json.taskDueDate }) : null }}\n    },\n    \"Tags\": {\n        \"multi_select\": {{ $json.taskTags ? JSON.stringify($json.taskTags.map(tag => ({ name: tag })) ) : '[]' }}\n    },\n    \"Status\": {\n        \"status\": { \"name\": \"{{ $json.taskStatus }}\" }\n    },\n    \"Priority\": {\n        \"select\": { \"name\": \"{{ $json.taskPriority }}\" }\n    }\n  },\n  \"children\": {{ $json.taskBlocks ? JSON.stringify($json.taskBlocks) : '[]' }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3020,
        -800
      ],
      "id": "6877da28-ee6d-42fb-8d7f-04c5b760fa1a",
      "name": "Create All Tasks1",
      "retryOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// Code Node: Dynamic Task ID Aggregator\n\n// Get all the created task pages\nconst createdTasks = $input.all();\n\n// Initialize results object\nconst results = {\n  allTasks: [],\n  tasksByCategory: {\n    coreTasks: [],\n    adTasks: [],\n    socialTasks: [],\n    emailTasks: [],\n    mailerTasks: [],\n    nurtureTasks: []\n  },\n  tasksByKeyword: {}\n};\n\n// Define keywords for task categories\nconst categoryKeywords = {\n  // Core tasks\n  coreTasks: [\"Funnel Pages\", \"Trojan Horse Survey\", \"Build Automations\", \"CRM Sync\"],\n  \n  // Ad campaign tasks\n  adTasks: [\"Ad Creatives\", \"Ad Copy\", \"Ad Approval\", \"Upload Ad Campaign\", \"Campaign to Meta\"],\n  \n  // Social media tasks\n  socialTasks: [\"ManyChat\", \"Social Media Script\", \"Script to Client\", \"Videos for Editing\", \"Edited Video\"],\n  \n  // Email tasks\n  emailTasks: [\"Email Sequence\", \"Winner Announcement\", \"Promotional Email\"],\n  \n  // Mailer tasks\n  mailerTasks: [\"QR Code\", \"Mailer Copy\"],\n  \n  // Nurture tasks\n  nurtureTasks: [\"Nurture Sequence\", \"Phone Script\", \"Lead Follow-Up\"]\n};\n\n// Process each task from the created tasks\nfor (const task of createdTasks) {\n  // Extract task details\n  try {\n    const taskData = task.json;\n    \n    // Get the task ID\n    const taskId = taskData.id;\n    \n    // Get the task title\n    const taskTitle = taskData.properties?.[\"Task Title\"]?.title?.[0]?.plain_text || \"\";\n    \n    // Get the task status\n    const taskStatus = taskData.properties?.Status?.status?.name || \"\";\n    \n    // Get the task priority\n    const taskPriority = taskData.properties?.Priority?.select?.name || \"\";\n    \n    // Get the task assignee\n    const taskAssignee = taskData.properties?.Assignee?.people?.[0]?.name || \"\";\n    \n    // Get the task URL\n    const taskUrl = taskData.url || \"\";\n    \n    // Create task object\n    const taskObject = {\n      id: taskId,\n      title: taskTitle,\n      status: taskStatus,\n      priority: taskPriority,\n      assignee: taskAssignee,\n      url: taskUrl\n    };\n    \n    // Add to all tasks array\n    results.allTasks.push(taskObject);\n    \n    // Categorize by task type based on keywords\n    for (const [category, keywords] of Object.entries(categoryKeywords)) {\n      if (keywords.some(keyword => taskTitle.includes(keyword))) {\n        results.tasksByCategory[category].push(taskObject);\n      }\n    }\n    \n    // Create keyword-based task lookup\n    const words = taskTitle.split(' ');\n    for (const word of words) {\n      if (word.length > 3) { // Only use meaningful words\n        const cleanWord = word.toLowerCase().replace(/[^a-z0-9]/g, '');\n        if (!results.tasksByKeyword[cleanWord]) {\n          results.tasksByKeyword[cleanWord] = [];\n        }\n        results.tasksByKeyword[cleanWord].push(taskObject);\n      }\n    }\n    \n  } catch (error) {\n    console.warn(`Error processing task: ${error.message}`);\n  }\n}\n\n// Add summary counts\nresults.counts = {\n  total: results.allTasks.length,\n  core: results.tasksByCategory.coreTasks.length,\n  ad: results.tasksByCategory.adTasks.length,\n  social: results.tasksByCategory.socialTasks.length,\n  email: results.tasksByCategory.emailTasks.length,\n  mailer: results.tasksByCategory.mailerTasks.length,\n  nurture: results.tasksByCategory.nurtureTasks.length\n};\n\n// Add feature flags to indicate if certain task types exist\nresults.hasAdTasks = results.tasksByCategory.adTasks.length > 0;\nresults.hasSocialTasks = results.tasksByCategory.socialTasks.length > 0;\nresults.hasEmailTasks = results.tasksByCategory.emailTasks.length > 0;\nresults.hasMailerTasks = results.tasksByCategory.mailerTasks.length > 0;\n\n// Return the results\nreturn { json: results };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3240,
        -800
      ],
      "id": "e48a6b05-fc81-477c-a166-5a477d0d1bba",
      "name": "Code - Aggregate Task IDs1"
    }
  ],
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-04-09T14:45:01.073Z",
      "updatedAt": "2025-04-09T14:45:01.073Z",
      "role": "workflow:owner",
      "workflowId": "7rRCi4Lx2wNjCpjB",
      "projectId": "JPifOz0qwqZ4t1q3",
      "project": {
        "createdAt": "2025-01-22T02:43:20.320Z",
        "updatedAt": "2025-01-22T02:44:04.001Z",
        "id": "JPifOz0qwqZ4t1q3",
        "name": "Emma Pace <emma@salesgenius.co>",
        "type": "personal",
        "icon": null,
        "projectRelations": [
          {
            "createdAt": "2025-01-22T02:43:20.320Z",
            "updatedAt": "2025-01-22T02:43:20.320Z",
            "role": "project:personalOwner",
            "userId": "f8bb0fb6-1857-45fa-9ac1-27b6e6497323",
            "projectId": "JPifOz0qwqZ4t1q3",
            "user": {
              "createdAt": "2025-01-22T02:43:19.556Z",
              "updatedAt": "2025-02-14T18:38:15.546Z",
              "id": "f8bb0fb6-1857-45fa-9ac1-27b6e6497323",
              "email": "emma@salesgenius.co",
              "firstName": "Emma",
              "lastName": "Pace",
              "personalizationAnswers": {
                "version": "v4",
                "personalization_survey_submitted_at": "2025-01-22T02:45:22.428Z",
                "personalization_survey_n8n_version": "1.74.3",
                "companySize": "<20",
                "companyType": "digital-agency",
                "role": "business-owner",
                "reportedSource": "youtube"
              },
              "settings": {
                "userActivated": true,
                "easyAIWorkflowOnboarded": true,
                "firstSuccessfulWorkflowId": "TotyBJ1rIIIGlYrK",
                "userActivatedAt": 1737997390312,
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1739558292687
                }
              },
              "role": "global:owner",
              "disabled": false,
              "mfaEnabled": false,
              "isPending": false,
              "isOwner": true
            }
          }
        ]
      }
    }
  ],
  "staticData": {
    "node:Typeform Trigger": {
      "webhookId": "n8n-zqrgeszgie"
    }
  },
  "tags": [
    {
      "createdAt": "2025-02-21T17:21:41.750Z",
      "updatedAt": "2025-02-21T17:21:41.750Z",
      "id": "hCxs00bYB7kqJnEo",
      "name": "WORKING"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-04-10T14:15:30.000Z",
  "versionId": "7220e35b-42d1-4c1b-b157-e87334945ca5"
}